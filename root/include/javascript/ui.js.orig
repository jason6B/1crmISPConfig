if(! SUGAR.ui.loaded)
SUGAR.ui = new (function() {
	var UI = this;
	UI.loaded = true;

	// -- Utility methods -- //

	UI.getEltRegion = function(elt) {
		if(elt) {
			var rgn = YDom.getRegion(elt);
			if(rgn) {
				rgn.x = rgn.left; rgn.y = rgn.top;
				return rgn;
			}
		}
	}
	
	UI.getViewport = function(margin) {
		var ret;
		if(! margin) margin = 0;
		if(isIPhone) ret = {
			margin: margin,
			x: window.pageXOffset + margin,
			y: window.pageYOffset + margin,
			width: window.innerWidth - 2*margin, // visible viewport
			height: window.innerHeight - 2*margin,
			view_width: document.documentElement.clientWidth - 2*margin, // page size (meta viewport)
			view_height: document.documentElement.clientHeight - 2*margin,
			doc_width: document.documentElement.scrollWidth - 2*margin, // page size (actual)
			doc_height: document.documentElement.scrollHeight - 2*margin
		};
		else ret = {
			x: YDom.getDocumentScrollLeft() + margin,
			y: YDom.getDocumentScrollTop() + margin,
			width: YDom.getViewportWidth() - 2*margin,
			height: YDom.getViewportHeight() - 2*margin
		};
		if($('tbarDiv')) {
			ret.y += 24;
			ret.height -= 24; // fixed window decorations
			ret.offset = 24;
		}
		return ret;
	}

	UI.getTransformProperty = function() {
		if(! isset(this._transformProp)) {
			var d = document.body; // document.createElement('div');
			var test = ['transform', 'webkitTransform', 'mozTransform'];
			this._transformProp = '';
			for(var i = 0; i < test.length; i++) {
				if(d.style[test[i]] !== undefined) {
					this._transformProp = test[i];
					break;
				}
			}
		}
		return this._transformProp;
	}

	UI.showStatus = function(msg, timeout) {
		return StatusHandler.show(msg, timeout);
	}
	UI.hideStatus = function(s) {
		return StatusHandler.remove(s);
	}

	UI.addRemoveClass = function(elt, className, state) {
		if(state)
			YDom.addClass(elt, className);
		else if(isset(state))
			YDom.removeClass(elt, className);
		else
			UI.addRemoveClass(elt, className, ! YDom.hasClass(elt, className));
	}

	UI.clearChildNodes = function(elt) {
		if(! elt || ! elt.childNodes) return;
		while(elt.childNodes.length) elt.removeChild(elt.childNodes[0]);
	}
	
	UI.domRemoveElt = function(elt) {
		if(elt && elt.parentNode) {
			try {
				elt.parentNode.removeChild(elt);
			} catch(e) {}
		}
	}

	UI.setElementText = function(elt, text) {
		if(! elt) return;
		if(! isset(text)) text = '';
		if(isIE)
			elt.innerText = text;
		else if('textContent' in elt)
			elt.textContent = text;
		else {
			UI.clearChildNodes(elt);
			elt.appendChild(document.createTextNode(text));
		}
	}
	
	UI.setElementContent = function(elt, content) {
		if(! elt) return;
		if(! isset(content)) content = '';
		if(isNode(content)) {
			elt.appendChild(content);
		} else if(YLang.isArray(content)) {
			for(var i = 0; i < content.length; i++) {
				if(isNode(content[i]))
					elt.appendChild(content[i]);
				else
					elt.appendChild(document.createTextNode(content[i]));
			}
		} else {
			UI.setElementText(elt, content);
		}
	}
	
	UI.formatSize = function(size, def_unit) {
		if(isset(size)) {
			var m = (''+size).match(/^([0-9]*\.?[0-9]+|[0-9]+\.[0-9]*)\s*(px|em|ex|pt|%)?$/);
			if(m) {
				return m[1] + (m[2] || def_unit || 'px');
			}
		}
	}

	UI.setWidth = function(elt, width, def_unit) {
		width = UI.formatSize(width, def_unit);
		if(width)
			elt.style.width = width;
	}
	
	UI.createIcon = function(icon_name, parent) {
		return createElement2('div', {className: 'input-icon '+icon_name}, null, parent);
	}
	
	// -- Classes -- //


	// object to manage all popup windows currently open and direct mouse/keyboard events
	var PopupManager = UI.PopupManager = {
		modal_stack: [],
		current_modal: null,
		open_stack: [],
		last_opened: null,
		loading_popup: null,
		uniqid: 0,
		popupBeforeShow: function(popup) {
			if(! popup || popup === this.last_opened) {
				return;
			}
			if(! popup.stacked) {
				while(this.last_opened && this.last_opened !== this.current_modal) {
					if(this.last_opened === popup)
						return;
					var old = this.last_opened;
					this.last_opened = this.open_stack.pop();
					old.close();
				}
			}
			if(this.last_opened)
				this.open_stack.push(this.last_opened);
			this.last_opened = popup;
			this.attachEvents();
		},
		canceledShow: function(popup) {
			this.popupHidden(popup);
		},
		popupShown: function(popup) {
			if(! popup || popup !== this.last_opened) {
				return;
			}
			if(popup.modal && popup !== this.current_modal) {
				var old = this.current_modal;
				if(old)
					this.modal_stack.push(old);
				else if(! popup.hide_mask)
					this.showModalMask();
				this.current_modal = popup;
				if(this.last_opened === old)
					this.last_opened = null;
				if(old)
					old.hide();
			}
		},
		popupHidden: function(popup) {
			if(popup && popup === this.last_opened)
				this.last_opened = this.open_stack.pop();
			if(popup && popup === this.current_modal) {
				this.current_modal = this.modal_stack.pop();
				this.last_opened = this.current_modal;
				if(this.current_modal)
					this.current_modal.show();
			}
			if(! this.current_modal || this.current_modal.hide_mask)
				this.hideModalMask();
			if(! this.last_opened)
				this.removeEvents();
		},
		close: function(popup) {
			var r, done;
			while(this.last_opened && ! done) {
				if(! popup || this.last_opened === popup || this.last_opened.id === popup)
					done = true;
				if(! (r = this.last_opened.close()) )
					break;
			}
			return r;
		},
		reposition: function() {
			if(this.current_modal)
				this.positionMask();
			for(var i = 0; i < this.open_stack.length; i++)
				this.open_stack[i].reposition();
			if(this.last_opened)
				this.last_opened.reposition();
		},
		getModalMask: function() {
			if(! this.mask_elt) {
				this.mask_elt = createElement2('div', {className: 'pageMask'});
				document.body.appendChild(this.mask_elt);
			}
			return this.mask_elt;
		},
		showModalMask: function() {
			if(this.mask_visible)
				return;
			var mask = this.getModalMask();
			if(mask) {
				if(this.mask_timer)
					clearTimeout(this.mask_timer);
				mask.style.display = 'block';
				mask.style.opacity = 0.0;
				setTimeout(function() { mask.style.opacity = 0.5; }, 0);
				mask.ontouchstart = function() { if(event.touches.length == 1) return false; }
				this.mask_visible = true;
				this.positionMask();
			}
		},
		hideModalMask: function() {
			if(! this.mask_visible)
				return;
			var mask = this.getModalMask();
			mask.style.opacity = 0.0;
			this.mask_timer = setTimeout(function() { mask.style.display = 'none'; }, 500);
			this.mask_visible = false;
		},
		positionMask: function() {
			if(isIPhone) {
				var m = this.mask_elt;
				var viewp = UI.getViewport();
				m.style.position = 'absolute';
				m.style.left = 0;
				m.style.top = 0;
				m.style.width = viewp.doc_width + 'px';
				m.style.height = viewp.doc_height + 'px';
			}
		},
		setLoadingPopup: function(p) {
			this.loading_popup = p;
		},
		initContent: function(p) {
			if(this.loading_popup)
				this.loading_popup.initContent(p);
		},
		attachEvents: function() {
			if(this.events)
				return;
			var evts = {
				document: {
					mousemove: this.mouseMoveDoc,
					mousedown: this.mouseDownDoc,
					mouseup: this.mouseUpDoc,
					keydown: this.keyDownDoc
				},
				window: {
					scroll: this.reposition,
					resize: this.reposition,
					mouseout: this.mouseOutDoc
				}
			};
			for(var target in evts) {
				for(var evt in evts[target])
					YEvent.addListener(window[target], evt, evts[target][evt], this, true);
			}
			this.events = evts;
		},
		removeEvents: function() {
			var evts = this.events;
			if(! evts) return;
			this.events = null;
			for(var target in evts) {
				for(var evt in evts[target])
					YEvent.removeListener(window[target], evt, evts[target][evt]);
			}
		},
		uniqueId: function() {
			return 'popup-window-'+(++this.uniqid);
		},
		mouseMoveDoc: function(evt) {
			if(this.now_dragging) return;
			if(this.last_opened) this.last_opened.mouseMoveDoc(evt);
		},
		mouseDownDoc: function(evt) {
			var button = evt.which || evt.button;
			if(button != 1) return;
			if(this.last_opened) return this.last_opened.mouseDownDoc(evt);
		},
		mouseUpDoc: function(evt) {
			var button = evt.which || evt.button;
			if(button != 1) return;
			if(this.now_dragging) return;
			if(this.last_opened) this.last_opened.mouseUp(evt);
		},
		mouseOutDoc: function(evt) {
			if(this.now_dragging) return;
			if(this.last_opened) this.last_opened.mouseOut(evt);
		},
		keyDownDoc: function(evt) {
			if(this.now_dragging) return;
			if(evt.keyCode == 27) this.close();
			else this.last_opened.keyDown(evt);
		},
		nowDragging: function() {
			return this.now_dragging;
		}
	};


	// mixin class used to manage element dragging behaviour
	var DragHandler = UI.DragHandler = function() {}
	DragHandler.prototype = {
		makeDragTarget: function(target, tag, opts) {
			YEvent.addListener(target, 'selectstart',
				function(evt) { YEvent.stopEvent(evt); }, this, true);
			YEvent.addListener(target, 'mousedown',
				function(evt) { this.dragStart(evt, tag); (opts && opts.mousedown) ? opts.mousedown(evt) : YEvent.stopEvent(evt); },
				this, true);
		},
		destroyDragTarget: function(target) {
			YEvent.purgeElement(target);
		},
		dragStart: function(evt, tag) {
			var button = evt.which || evt.button,
				exy = YEvent.getXY(evt),
				evts = {
					document: {
						mousemove: this.drag,
						mouseup: this.dragEnd,
						keydown: this.dragKeyDown,
						mouseexit: this.dragCancel
					},
					window: {
						scroll: this.dragScroll
					}
				};
			if(button != 1)
				return;
			this.draginfo = {
					startX: exy[0], startY: exy[1],
					scrollStartX: YDom.getDocumentScrollLeft(),
					scrollStartY: YDom.getDocumentScrollTop(),
					dragX: 0, dragY: 0,
					scrollX: 0, scrollY: 0,
					tag: tag,
					hooks: evts};
			for(var target in evts) {
				for(var evt in evts[target])
					YEvent.addListener(window[target], evt, evts[target][evt], this, true);
			}
			PopupManager.now_dragging = true;
			UI.callEvent(this, this.ondragstart, evt, this.draginfo);
		},
		drag: function(evt) {
			if(! this.draginfo)
				return;
			var exy = YEvent.getXY(evt);
			this.draginfo.dragX = exy[0] - this.draginfo.startX;
			this.draginfo.dragY = exy[1] - this.draginfo.startY;
			this.draginfo.scrolled = false;
			UI.callEvent(this, this.ondrag, evt, this.draginfo);
			return false;
		},
		dragCancel: function(evt) {
			if(! this.draginfo) return;
			this.draginfo.canceled = true;
			this.dragEnd(evt);
		},
		dragKeyDown: function(evt) {
			if(evt.keyCode == 27) {
				YEvent.stopEvent(evt);
				this.dragCancel(evt);
			}
		},
		dragScroll: function(evt) {
			var di = this.draginfo, x = di.scrollX, y = di.scrollY;
			di.scrollX = YDom.getDocumentScrollLeft() - this.draginfo.scrollStartX;
			di.scrollY = YDom.getDocumentScrollTop() - this.draginfo.scrollStartY;
			di.scrolled = {dx: di.scrollX - x, dy: di.scrollY - y};
			UI.callEvent(this, this.ondrag, evt, this.draginfo);
		},
		dragEnd: function(evt) {
			var button = evt.which || evt.button;
			if(! this.draginfo || ! this.draginfo.canceled && (button != 1 && button != 3))
				return;
			var evts = this.draginfo.hooks;
			if(evts) {
				this.draginfo.hooks = null;
				for(var target in evts) {
					for(var evt in evts[target])
						YEvent.removeListener(window[target], evt, evts[target][evt]);
				}
			}
			PopupManager.now_dragging = false;
			UI.callEvent(this, this.ondragend, evt, this.draginfo);
			this.draginfo = null;
		},
		ondragstart: function(evt, draginfo) {},
		ondrag: function(evt, draginfo) {},
		ondragend: function(evt, draginfo) {}
	};


	var Popup = UI.Popup = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.target = null;
		this.target_offset = null;
		this.target_active_class = 'active';
		this.desired_position = null;
		this.fixed_position = null;
		this.modal = false;
		this.destroy_on_close = false;
		this.close_on_exit = true;
		this.close_on_ext_click = true;
		this.close_delay = 500;
		this.keep_in_viewport = true;
		this.visible = false;
		this.hovered = false;
		this.focused = false;
		this.change_opacity = true;
		this.prevent_show_timer = null;
		this.width = null;
		if(params) YLang.augmentObject(this, params, true);
		if(! this.id)
			this.id = PopupManager.uniqueId();
	}
	Popup.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt && this.id)
				this.elt = $(this.id);
			if(! this.elt)
				return;
			this.set_up = true;
		},
		getSize: function() {
			if(this.elt) {
				return UI.getEltRegion(this.elt);
			}
		},
		setWidth: function(w) {
			this.width = w;
			if(this.elt)
				UI.setWidth(this.elt, w);
			this.reposition();
		},
		setDesiredPosition: function(pos) {
			this.desired_position = pos;
		},
		setFixedPosition: function(pos) {
			this.fixed_position = pos;
		},
		getOuterMargin: function() {
			var t = this.target_offset;
			return get_default(t ? t.outer_margin : null, 12);
		},
		getDesiredPosition: function() {
			if(this.desired_position)
				return this.desired_position;
			else if(this.target || this.target_offset) {
				var offs = this.target_offset, over = false, above = false, align = null,
					tg = UI.getEltRegion(this.target) || UI.getViewport(this.getOuterMargin()),
					size = this.getSize(),
					pos = {x: 0, y: 0};
				if(! tg || ! size)
					return pos;
				var offs = this.target_offset, over = false, above = false, align = null;
				if(offs) {
					over = offs.over;
					above = offs.above;
					align = offs.align;
				} else
					offs = {};
				if(above) {
					pos.y = tg.y - size.height;
					if(over)
						pos.y += Math.min(size.height, tg.height);
				} else {
					pos.y = over ? tg.y : tg.y + tg.height;
				}
				if(align == 'onleft') {
					pos.x = tg.x - size.width;
				}
				else if(align == 'left') {
					pos.x = tg.x - size.width + Math.min(size.width, tg.width);
				}
				else if(align == 'onright') {
					pos.x = tg.x + tg.width;
				}
				else if(align == 'right') {
					pos.x = tg.x + tg.width - size.width;
				}
				else if(align == 'center') {
					pos.x = tg.x + (tg.width - size.width) / 2;
				}
				else {
					pos.x = tg.x;
				}
				if(offs.left)
					pos.x += offs.left;
				if(offs.top)
					pos.y += offs.top;
				return pos;
			}
		},
		getMaxAutoSize: function() {
			var viewp = UI.getViewport(this.getOuterMargin());
			var perc = this.max_percent_size || {};
			var size = {width: (perc.width || 100) * viewp.width / 100, height: (perc.height || 100) * viewp.height / 100};
			if(this.max_auto_size) {
				var m = this.max_auto_size;
				if(m.width < size.width) size.width = m.width;
				if(m.height < size.height) size.height = m.height;
			}
			return size;
		},
		applyDimensions: function() {
			// set maximum size
			var max_size, viewp = UI.getViewport(this.getOuterMargin());
			var set_w = null, set_h = null;
			if(this.fixedSize) {
				set_w = viewp.width + 'px';
				set_h = viewp.height + 'px';
			}
			else if( (max_size = this.getMaxAutoSize()) ) {
				if(max_size.width)
					set_w = max_size.width + 'px';
				if(max_size.height)
					set_h = max_size.height + 'px';
			}
			if(this.max_width) set_w = UI.formatSize(this.max_width);
			if(this.max_height) set_h = UI.formatSize(this.max_height);
			this.elt.style.maxWidth = set_w;
			if(this.content_elt && ! this.fixedSize) {
				this.content_elt.style.maxHeight = set_h;
				this.elt.style.maxHeight = null;
			} else {
				this.elt.style.maxHeight = set_h;
			}
			if(this.min_width)
				this.elt.style.minWidth = UI.formatSize(this.min_width);
			if(this.min_height)
				this.elt.style.minHeight = UI.formatSize(this.min_height);
			return viewp;
		},
		reposition: function(temp_pos) {
			if(! this.elt || ! this.visible)
				return;
			var viewp = this.applyDimensions();

			var pos;
			if(temp_pos)
				pos = temp_pos;
			else if(this.fixed_position)
				pos = this.fixed_position;
			else {
				pos = this.getDesiredPosition();
				if(pos) {
					var size = this.getSize();
					if(size && this.keep_in_viewport) {
						if(pos.x + size.width > viewp.x + viewp.width)
							pos.x = viewp.x + viewp.width - size.width;
						if(pos.y + size.height > viewp.y + viewp.height)
							pos.y = viewp.y + viewp.height - size.height;
						if(viewp.x > pos.x)
							pos.x = viewp.x;
						if(viewp.y > pos.y)
							pos.y = viewp.y;
					}
				}
			}
			if(! pos)
				pos = {x: 0, y: 0};
			if(pos) {
				var c = this.getContainer(true);
				if(c) {
					var cpos = YDom.getXY(c);
					pos.x -= cpos[0];
					pos.y -= cpos[1];
				}
				/*var tprop;
				if(this.transform_position && (tprop = UI.getTransformProperty())) {
					this.elt.style[tprop] = 'translate3d(' + pos.x + 'px,' + pos.y + 'px, 0)';
				} else {*/
					this.elt.style.left = pos.x + 'px';
					this.elt.style.top = pos.y + 'px';
				//}
			}
			if(! temp_pos)
				UI.callEvent(this, this.onresize, pos, viewp);
		},
		cancelShowTimer: function(shown) {
			if(this.showTimer) {
				clearTimeout(this.showTimer);
				this.showTimer = null;
				if(! shown) {
					UI.callEvent(this, this.oncancelshow);
					PopupManager.canceledShow(this);
				}
				return true;
			}
		},
		cancelCloseTimer: function() {
			if(this.closeTimer) {
				clearTimeout(this.closeTimer);
				this.closeTimer = null;
				return true;
			}
		},
		show: function(delay) {
			this.cancelCloseTimer();
			if(this.prevent_show_timer)
				return;
			if(this.visible || (delay && this.showTimer)) {
				this.reposition();
				return;
			}
			PopupManager.popupBeforeShow(this);
			if(delay) {
				var inp = this;
				this.showTimer = setTimeout(function() { inp.performShow(); }, delay);
				return true;
			} else
				return this.performShow();
		},
		performShow: function(delay) {
			this.setup();
			this.cancelShowTimer(true);
			if(! this.elt || this.visible) return false;
			this.visible = true;
			this.reposition({x: -2000, y: -2000});
			if(this.change_opacity)
				this.elt.style.opacity = 0.0;
			this.elt.style.position = 'absolute';
			this.elt.style.visibility = 'hidden';
			this.elt.style.display = 'block';
			var e = this.elt;
			if(this.zIndex)
				e.style.zIndex = this.zIndex;
			var tprop = UI.getTransformProperty(), tform;
			if(tprop && (tform = this.getDisplayTransform())) {
				if(tprop == 'webkitTransform') {
					// fix flashing of element in Chrome on Mac
					e.style.webkitBackfaceVisibility = 'hidden';
				}
				e.style[tprop] = tform;
				if(this.target_offset && this.target_offset.over && this.target_offset.top) {
					e.style[tprop + 'Origin'] = 'center ' + (10 - this.target_offset.top) + 'px';
				}
			}
			this.reposition();
			e.style.visibility = 'visible';
			setTimeout(function() { e.style.opacity = 1.0; if(tform) e.style[tprop] = ''; }, 0);
			if(this.target && this.target_active_class)
				YDom.addClass(this.target, this.target_active_class);
			PopupManager.popupShown(this);
			this.addHooks();
			if(e.focus && ! this.disable_auto_focus)
				e.focus();
			UI.callEvent(this, this.onshow);
			return true;
		},
		getDisplayTransform: function() {
			if(isset(this.customDisplayTransform))
				return this.customDisplayTransform;
			return ''; //'scale(0.85)';
		},
		hide: function() {
			this.cancelShowTimer();
			this.hovered = false;
			if(! this.elt || ! this.visible)
				return;
			this.visible = false;
			var e = this.elt, p = this;
			if(this.change_opacity) {
				e.style.opacity = 0.0;
				setTimeout(function() { if(! p.visible) e.style.display = 'none'; }, 500);
			} else
				e.style.display = 'none';
			if(this.target && this.target_active_class)
				YDom.removeClass(this.target, this.target_active_class);
			PopupManager.popupHidden(this);
			UI.callEvent(this, this.onhide);
		},
		mouseOver: function(evt) {
			this.hovered = true;
			if(this.close_on_exit)
				this.cancelCloseTimer();
			UI.callEvent(this, this.onmouseover, evt);
		},
		mouseOut: function(evt) {
			if(PopupManager.nowDragging()) return;
			this.hovered = false;
			if(this.close_on_exit)
				this.close(this.close_delay);
			UI.callEvent(this, this.onmouseout, evt);
		},
		mouseUp: function(evt) {
			UI.callEvent(this, this.onmouseup, evt);
		},
		mouseMove: function(evt) {
			if(! this.draginfo && ! PopupManager.nowDragging())
				YEvent.stopPropagation(evt);
		},
		mouseDown: function(evt) {
			if(this.close_on_ext_click)
				YEvent.stopPropagation(evt);
		},
		mouseDownDoc: function(evt) {
			if(this.close_on_ext_click || this.close_on_exit) {
				this.close();
				return false;
			}
		},
		mouseMoveDoc: function(evt) {
			if(this.close_on_exit) {
				var over_target = false;
				if(this.target) {
					var rgn = UI.getEltRegion(this.target);
					var exy = YEvent.getXY(evt);
					over_target = (rgn
					  && exy[0] >= rgn.left && exy[0] <= rgn.right
					  && exy[1] >= rgn.top && exy[1] <= rgn.bottom);
				}
				if(over_target)
					this.cancelCloseTimer();
				else
					this.close(this.close_delay);
			}
		},
		handleFocus: function(evt) {
			if(! this.focused) {
				this.focused = true;
				if(this.close_on_exit)
					this.cancelCloseTimer();
				UI.callEvent(this, this.onfocus, evt);
			}
		},
		handleBlur: function(evt) {
			if(this.focused) {
				this.focused = false;
				if(this.close_on_exit)
					this.close(this.close_delay);
				UI.callEvent(this, this.onblur, evt);
			}
		},
		keyDown: function(evt) {
		},
		addHooks: function() {
			var popup = this,
				evts = {
					mouseover: this.mouseOver,
					mouseout: this.mouseOut,
					mousedown: this.mouseDown,
					mousemove: this.mouseMove,
					// only possible if element has an assigned tabIndex (SelectInput popup)
					focus: this.handleFocus,
					blur: this.handleBlur
				};
			for(var evt in evts)
				YEvent.addListener(this.elt, evt, evts[evt], this, true);
		},
		getContainer: function(if_custom) {
			var c;
			if(this.container) return this.container;
			if(this.container_id && (c = $(this.container_id))) return c;
			return if_custom ? null : document.body;
		},
		getContentElement: function() {
			if(! this.content_elt && this.content_id)
				this.content_elt = $(this.content_id);
			return this.content_elt;
		},
		render: function() {
			this.setup();
			if(this.rendered) return;
			this.rendered = true;
			if(! this.elt) {
				this.elt = createElement2('div', {id: this.id, className: this.className});
				if(this.width)
					UI.setWidth(this.elt, this.width);
				this.renderContent();
				this.getContainer().appendChild(this.elt);
			}
			return this.elt;
		},
		renderContent: function() {
			var content = this.getContentElement();
			if(content) {
				this.elt.appendChild(content);
				if(content.style.display == 'none')
					content.style.display = '';
			}
		},
		canClose: function() { return true; },
		close: function(delay) {
			this.cancelShowTimer();
			if(! this.visible || ! this.canClose() || (delay && this.closeTimer))
				return;
			if(delay) {
				var inp = this;
				this.closeTimer = setTimeout(function() { inp.performClose(); }, delay);
			} else
				this.performClose();
			return true;
		},
		performClose: function(delay) {
			this.cancelCloseTimer();
			var self = this;
			this.hide();
			if(this.destroy_on_close) {
				setTimeout(function() { self.destroy(); }, 500);
			} else {
				// used mainly to prevent a re-show when clicking the target to hide the popup
				this.prevent_show_timer = setTimeout(function() { self.prevent_show_timer = null; }, 200);
			}
			UI.callEvent(this, this.onclose);
		},
		destroy: function() {
			YEvent.purgeElement(this.elt);
			UI.domRemoveElt(this.elt);
			this.elt = null;
			this.rendered = false;
			UI.callEvent(this, this.ondestroy);
		},
		initContent: function(params) {}
	};


	var PopupSlidePanel = UI.PopupSlidePanel = function(id, params) {
		var defaults = {
			close_on_exit: false, className: 'select-menu input-outer flat-top active',
			customDisplayTransform: 'scaleY(0.4)', disable_auto_focus: true,
			keep_in_viewport: false, hide_mask: true, destroy_on_close: true
		};
		if(params)
			YLang.augmentObject(defaults, params, true);
		Popup.call(this, id, defaults);
	}
	YLang.extend(PopupSlidePanel, Popup, {});


	var Tooltip = UI.Tooltip = function(id, params) {
		this.text = '';
		this.content = null;
		this.show_delay = 500;
		if(! params) params = {};
		if(! params.className) params.className = 'popup-tooltip';
		if(! params.target_offset) params.target_offset = {top: 10};
		Popup.call(this, id, params);
		this.stacked = true;
		if(! this.target)
			this.target = $(this.target_id);
		if(this.target) {
			var popup = this;
			if(! this.pre_triggered)
				this.target.onmouseover = function() { popup.render(); popup.show(popup.show_delay); }
			this.target.onmouseout = function() { popup.close(); }
		}
		if(this.pre_triggered) {
			this.render();
			this.show(this.show_delay);
		}
	}
	YLang.extend(Tooltip, Popup, {
		renderContent: function() {
			this.content_elt = createElement2('span', {className: 'tooltip-text'});
			if(this.content)
				this.content_elt.innerHTML = this.content;
			else
				UI.setElementText(this.content_elt, this.text);
			this.elt.appendChild(this.content_elt);
		}
	});


	var Dialog = UI.Dialog = function(id, params) {
		Popup.call(this, id, {className: 'popup-dialog input-outer'});
		this.resizable = true;
		this.draggable = true;
		this.have_title_bar = true;
		this.have_close_button = true;
		this.align_center = true;
		this.transform_position = true;
		this.max_percent_size = {width: 80, height: 90};
		this.max_auto_size = {width: 1000, height: 700};
		if(isIPhone) {
			this.max_percent_size = {width: 95, height: 90};
			this.max_auto_size = {width: 1024, height: 400};
		}
		//this.change_opacity = false;
		this.destroy_on_close = true;
		this.close_on_exit = false;
		this.close_on_ext_click = false;
		this.modal = true;
		this.title = null;
		if(params) YLang.augmentObject(this, params, true);
	}
	YLang.extend(Dialog, Popup, {
		setTitle: function(title) {
			this.setTitleHtml(title);
		},
		setTitleHtml: function(title) {
			if(isset(title))
				this.title = title;
			this.renderTitle();
		},
		renderTitle: function() {
			if(this.title_text_elt) {
				if(isNode(this.title)) {
					this.title_text_elt.innerHTML = '';
					this.title_text_elt.appendChild(this.title);
				} else if(isset(this.title))
					this.title_text_elt.innerHTML = this.title;
				else
					UI.setElementText(this.title_text_elt, this.title_text || '\u00a0');
			}
		},
		setTitleText: function(title) {
			if(isset(title)) {
				this.title_text = title;
				this.title = null;
			}
			this.renderTitle();
		},
		getDesiredPosition: function() {
			if(this.desired_position)
				return this.desired_position;
			if(! this.align_center)
				return Dialog.superclass.getDesiredPosition.call(this);
			var size = this.getSize(),
				view = UI.getViewport(this.getOuterMargin());
			if(size && view) {
				return {
					x: view.x + Math.max(0, (view.width - size.width) / 2),
					y: view.y + Math.max(0, (view.height - size.height) / 2) };
			}
		},
		renderContent: function() {
			if(this.have_title_bar) {
				var e = this.getTitleBar();
				if(this.draggable) {
					this.makeDragTarget(e, 'title');
					YDom.addClass(this.elt, 'draggable');
				}
				this.elt.appendChild(e);
			}
			else if(this.have_close_button)
				this.elt.appendChild(this.getCloseButton());
			if(this.resizable) {
				var e = this.getResizeCorner();
				this.makeDragTarget(e, 'resize');
				this.elt.appendChild(e);
				YDom.addClass(this.elt, 'resizable');
			}
			Dialog.superclass.renderContent.call(this);
			if(this.footer_elt && this.content_elt)
				this.content_elt.appendChild(this.footer_elt);
			this.setTitleHtml();
		},
		destroy: function() {
			if(this.have_title_bar) {
				var e = this.getTitleBar();
				this.destroyDragTarget(e);
			}
			if(this.resizable) {
				var e = this.getResizeCorner();
				this.destroyDragTarget(e);
			}
			Dialog.superclass.destroy.call(this);
		},
		fetchContent: function(url, params, callback, autoShow) {
			var conn;
			if(url instanceof SUGAR.conn.HTTPRequest)
				conn = url;
			else
				conn = new SUGAR.conn.HTTPRequest(url, params);
			var self = this;
			conn.fetch(function() {
				self.loadContent(this, callback, autoShow);
			}, function() {
				self.loadError(this, callback, null, autoShow);
			});
		},
		fetchFormContent: function(form, form_values, conn_params, callback, autoShow) {
			var req = new SUGAR.conn.HTTPRequest(null, conn_params);
			if(req.loadForm(form, form_values))
				this.fetchContent(req, null, callback, autoShow);
		},
		loadContent: function(data, callback, autoShow) {
			this.render();
			if(data.getResult)
				data = data.getResult();
			if(isset(data.responseText))
				data = data.responseText;
			var text = SUGAR.util.disableInlineScripts(data);
			PopupManager.setLoadingPopup(this);
			this.setContent(text, true);
			var self = this;
			function done() {
				if(callback) callback();
				PopupManager.setLoadingPopup(null);
				if(autoShow) self.show();
				else self.reposition();
			}
			if(! this.disable_scripts)
				SUGAR.util.evalScript(data, done);
			else
				done();
		},
		initContent: function(params) {
			if(! params) return;
			if(! this.ignore_init_title) {
				if(params.title)
					this.setTitle(params.title);
				else if(params.title_text)
					this.setTitleText(params.title_text);
			}
			if(params.width) this.setWidth(params.width);
			if(params.list_id) this.list_id = params.list_id;
			// register forms here (params.forms?)
			UI.callEvent(this, this.oninitcontent);
		},
		setContent: function(text, no_repos) {
			var content = this.getContentElement();
			content.innerHTML = text;
			if(this.footer_elt)
				content.appendChild(this.footer_elt);
			if(! no_repos)
				this.reposition();
		},
		setFooter: function(text, no_repos) {
			this.getFooterElement().innerHTML = text;
			if(! no_repos)
				this.reposition();
		},
		loadError: function(conn, callback, err_str, autoShow) {
			if(! err_str) err_str = app_string('LBL_ASYNC_JS_ERROR');
			this.loadContent('<p align="center"><small><i>'+err_str+'</i></small></p>', callback, autoShow);
		},
		getTitleBar: function() {
			if(! this.title_elt) {
				this.title_elt = createElement2('div', {className: 'popup-title input-outer'});
				if(this.have_close_button)
					this.title_elt.appendChild(this.getCloseButton());
				this.title_text_elt = createElement2('div', {className: 'popup-title-text input-bounded'});
				this.title_elt.appendChild(this.title_text_elt);
			}
			return this.title_elt;
		},
		getContentElement: function() {
			var c = Dialog.superclass.getContentElement.call(this);
			if(! c)
				c = this.content_elt = createElement2('div', {id: this.content_id, className: 'dialog-content'});
			return c;
		},
		getContentSize: function() {
			var sz, chk;
			if(this.fixedSize)
				sz = deep_clone(this.fixedSize);
			else {
				chk = UI.getEltRegion(this.elt);
				if(chk)
					sz = {width: chk.width, height: chk.height};
				else
					sz = this.getSize();
			}
			sz.width -= 4;
			sz.height -= 42;
			return sz;
		},
		getFooterElement: function() {
			if(! this.footer_elt) {
				var e;
				if(this.footer_id && (e = $(this.footer_id)))
					this.footer_elt = e;
				else
					this.footer_elt = createElement2('div', {id: this.content_id, className: 'dialog-footer'});
			}
			return this.footer_elt;
		},
		getCloseButton: function() {
			if(! this.close_btn) {
				this.close_btn = createElement2('button', {type: 'button', className: 'popup-close'});
				this.close_btn.appendChild(UI.createIcon('icon-close'));
			}
			var self = this;
			//this.close_btn.onmousedown = function(evt) { YEvent.stopEvent(evt || window.event); }
			this.close_btn.onclick = function() { self.close(); }
			return this.close_btn;
		},
		getResizeCorner: function() {
			if(! this.resize_elt) {
				this.resize_elt = createElement2('div', {className: 'dialog-resizer'});
			}
			return this.resize_elt;
		},
		getDisplayTransform: function() {
			return ''; //'scale(0.95)';
		},
		setFixedSize: function(size) {
			if(this.elt) {
				if(! this.fixedSize) {
					if(! size)
						size = this.getSize();
					YDom.addClass(this.elt, 'fixed-size');
				}
				if(size) {
					if(size.width < this.min_width) size.width = this.min_width;
					if(size.height < this.min_height) size.height = this.min_height;
					// size adjustment is for element border
					this.elt.style.width = '' + (size.width - 4) + 'px';
					this.elt.style.height = '' + (size.height - 4) + 'px';
				}
			}
			this.fixedSize = size;
		},
		ondragstart: function(evt, info) {
			this.close_on_exit = false;
			info.pos = this.getDesiredPosition();
			info.size = this.getSize();
			if(! info.pos)
				info.pos = info.size;
		},
		ondrag: function(evt, info) {
			if(info.tag == 'resize') {
				var viewp = UI.getViewport(this.getOuterMargin()),
					w = info.size.width,
					h = info.size.height;
				if(this.align_center && ! this.desired_position)
					factor = 2.0;
				else
					factor = 1.0;
				w += info.dragX * factor;
				h += info.dragY * factor;
				this.setFixedSize({
					width: Math.min(viewp.width, Math.max(150, w)),
					height: Math.min(viewp.height, Math.max(76, h))
				});
			} else {
				this.desired_position = {x: info.pos.x + info.dragX, y: info.pos.y + info.dragY};
			}
			this.reposition();
		},
		ondragend: function(evt, info) {
		}
	});
	YLang.augment(Dialog, DragHandler);


	var MiniDialog = UI.MiniDialog = function(id, params) {
		Dialog.call(this, id, {className: 'popup-dialog mini-dialog input-outer'});
		this.resizable = false;
		this.align_center = false;
		this.close_on_ext_click = true;
		this.close_on_exit = true;
		this.modal = false;
		if(params && params.modal) {
			this.close_on_exit = false;
			this.hide_mask = true;
		}
		this.title = null;
		if(params) YLang.augmentObject(this, params, true);
	}
	YLang.extend(MiniDialog, Dialog, {
		getCloseButton: function() {
			if(! this.close_btn) {
				this.close_btn = createElement2('div', {className: 'mini-close'});
			}
			return MiniDialog.superclass.getCloseButton.apply(this);
		}
	});


	var StatusHandler = {
		uniqid: 0,
		messages: {},
		order: [],
		timeouts: {},
		visible: false,
		add_hooks: (isIPhone),
		show: function(status, timeout) {
			if(! isset(status))
				return;
			if(! (status instanceof StatusMessage))
				status = new StatusMessage(status);
			if(! status.id || ! this.messages[status.id]) {
				if(! status.id)
					status.id = 'status-msg-'+(++this.uniqid);
				this.messages[status.id] = status;
				this.order.push(status.id);
			}
			if(timeout)
				this.updateTimeout(status, timeout);
			this.updateDisplay();
			return status;
		},
		remove: function(status) {
			if(! status) return;
			if(typeof(status) == 'string' && this.messages[status])
				delete this.messages[status];
			else if(status.id && this.messages[status.id])
				delete this.messages[status.id];
			this.updateDisplay();
		},
		getStatusDiv: function() {
			if(! this.status_div) {
				this.status_div = createElement2('div', {className: 'statusDiv', id: 'ajaxStatusDiv'});
				document.body.appendChild(this.status_div);
			}
			return this.status_div;
		},
		updateTimeout: function(status, timeout) {
			if(! status || ! status.id || ! this.messages[status.id])
				return;
			if(this.timeouts[status.id]) {
				clearTimeout(this.timeouts[status.id]);
				delete this.timeouts[status.id];
			}
			if(timeout)
				this.timeouts[status.id] = setTimeout(function() { StatusHandler.remove(status.id); }, timeout);
		},
		cleanup: function() {
			var ord = [];
			for(var i = 0; i < this.order.length; i++)
				if(this.messages[this.order[i]])
					ord.push(this.order[i]);
			this.order = ord;
		},
		updateDisplay: function() {
			var div = this.getStatusDiv();
			if(! div)
				return;
			var content = [];
			for(var i = 0; i < this.order.length; i++) {
				var id = this.order[i];
				var status = this.messages[id];
				if(! status)
					continue;
				content.push(status.getMessage());
			}
			if(content.length) {
				div.innerHTML = html_escape(content.join('\n')).replace('\n', '<br>');
				toggleDisplay(div, true);
				if(! this.visible) {
					if(this.add_hooks) {
						YEvent.addListener(window, 'scroll', this._reposHook);
						YEvent.addListener(window, 'resize', this._reposHook);
					}
					this.visible = true;
				}
				this.reposition();
			} else {
				toggleDisplay(div, false);
				UI.clearChildNodes(div);
				if(this.visible) {
					if(this.add_hooks) {
						YEvent.removeListener(window, 'scroll', this._reposHook);
						YEvent.removeListener(window, 'resize', this._reposHook);
					}
					this.visible = false;
				}
			}
			this.cleanup();
		},
		reposition: function() {
			var div = this.getStatusDiv();
			if(! div || div.style.display == 'none')
				return;
			var size = UI.getEltRegion(div),
				viewp = UI.getViewport();
			if(size && viewp) {
				if(isIPhone) {
					div.style.position = 'absolute';
					div.style.top = viewp.y + 8 + 'px';
					div.style.left = ((viewp.width - size.width) / 2) + viewp.x + 'px';
				} else
					div.style.left = ((viewp.width - size.width) / 2) + 'px';
			}
		},
		_reposHook: function() { UI.Status.reposition(); }
	}
	UI.Status = StatusHandler;


	var StatusMessage = function(message, params) {
		this.message = message;
		var timeout;
		if(params)
			for(var k in params) {
				if(k == 'timeout') timeout = params[k];
				else this[k] = params[k];
			}
	};
	StatusMessage.prototype = {
		show: function(timeout) {
			StatusHandler.show(this, timeout);
		},
		setMessage: function(msg) {
			this.message = msg;
			UI.callEvent(this, this.onchange);
		},
		getMessage: function() {
			return this.message;
		},
		updateTimeout: function(timeout) {
			StatusHandler.updateTimeout(this, timeout);
		},
		remove: function() {
			StatusHandler.remove(this);
		},
		hide: function() { // alias for remove
			StatusHandler.remove(this);
		},
		onchange: function() {
			StatusHandler.updateDisplay();
		}
	};
	UI.StatusMessage = StatusMessage;


	// -- UI widgets

	var SelectOptions = function(params) {
		this.init(params);
	}
	SelectOptions.prototype = {
		clear: function() {
			this.keys = [];
			this.values = [];
		},
		init: function(params) {
			this.display_name = 'label';
			this.add_blank = false;
			this.dom_name = null;
			this.dom_module = null;
			this.language = null;
			this.limit_keys = null;
			this.keys = null;
			this.values = null;
			this.width = null;
			if(params)
				YLang.augmentObject(this, params, true);
			var keys = [], vals = [];
			if(this.dom_name) {
				var opts;
				if(this.dom_name.substring(0, 6) == 'model.')
					opts = SUGAR.modelCache.getModelData(this.dom_name.substring(6));
				else
					opts = SUGAR.language.getList(this.dom_name, this.dom_module, this.language);
				if(opts) {
					keys = opts.keys || [];
					vals = opts.values || [];
				}
			}
			if(this.limit_keys) {
				if(this.values) vals = this.values;
				var ks = [], i, v, vs = [];
				for(i = 0; i < keys.length; i++) {
					if(this.limit_keys.indexOf(keys[i]) >= 0) {
						ks.push(keys[i]);
						if(YLang.isArray(vals))
							vs.push(vals[i]);
						else
							vs.push(vals[keys[i]]);
					}
				}
				keys = ks;
				vals = vs;
			}
			if(! this.keys) this.keys = deep_clone(keys);
			if(! this.values) this.values = deep_clone(vals);
			if(this.add_blank && this.keys.indexOf('') < 0) {
				this.keys.splice(0, 0, '');
				var blank_label = isset(this.blank_label) ? this.blank_label : app_string('LBL_NONE');
				if(YLang.isArray(this.values))
					this.values.splice(0, 0, blank_label);
				else
					this.values[''] = blank_label;
			}
		},
		addOption: function(key, value) {
			this.keys.push(key);
			this.values.push(value);
			return true;
		},
		replaceOption: function(key, value) {
			var k = this.getKeyIndex(key);
			if(k >= 0)
				this.values[k] = value;
		},
		getKeys: function() {
			return this.keys;
		},
		getValues: function(keys) {
			if(YLang.isArray(this.values) && (! isset(keys) || keys == this.keys)) {
				return this.values;
			}
			if(! isset(keys))
				keys = this.getKeys();
			var vals = [];
			if(keys) {
				for(var i = 0; i < keys.length; i++)
					vals.push(this.getValue(keys[i]));
			}
			return vals;
		},
		getKeyIndex: function(key) {
			var k = this.getKeys();
			if(k)
				return k.indexOf(key);
			return -1;
		},
		getValue: function(key) {
			if(YLang.isArray(this.values)) {
				var kpos = this.getKeyIndex(key);
				if(kpos >= 0)
					return this.values[kpos];
			} else if(this.values)
				return this.values[key];
		}
	};
	UI.SelectOptions = SelectOptions;


	var SelectList = UI.SelectList = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.options = ''; // must be defined in params
		this.last_selected_index = null;
		this.selected_indexes = [];
		this.disabled_indexes = [];
		this.current_index = null;
		this.show_checks = false;
		this.icon_key = null;
		this.option_height = null;
		this.popup = false;
		this.multi_select = false;
		this.onchange = null;
		this.oncurrent = null;
		this.keystate = {ctrl: 0, shift: 0};
		this.focused = false;
		if(params) YLang.augmentObject(this, params, true);
		if(this.columns) this.setColumns(this.columns);
		if(! this.option_height)
			this.option_height = this.popup ? 22 : 20;
		this.initOptions();
	}
	SelectList.option_events = {
		onclick: function(evt) { this.optinfo.scroll.optionClick(this, this.optinfo); },
		onmouseover: function(evt) { this.optinfo.scroll.optionEvent(this, this.optinfo, 'over'); },
		onmouseout: function(evt) { this.optinfo.scroll.optionEvent(this, this.optinfo, 'out'); },
		onmousedown: function(evt) { this.optinfo.scroll.optionEvent(this, this.optinfo, 'down'); YEvent.stopPropagation(evt || window.event); },
		onmouseup: function(evt) { this.optinfo.scroll.optionEvent(this, this.optinfo, 'up'); }
	};
	SelectList.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(this.mode_name && ! this.mode_field) {
				this.mode_field = UI.getFormInput(this.form, this.mode_name);
				var input = this,
					focus = function(evt) { input.handleFocus(evt || window.event); },
					blur = function(evt) { input.handleBlur(evt || window.event); };
				this.mode_field.onfocus = focus;
				this.mode_field.onblur = blur;
				this.mode_field.onchange = function(k, v, upd) { input.modeUpdated(k); input.focus(); }
			}
			if(! this.popup && ! this.defer_render)
				this.render();
			if(! this.tabIndex && this.elt && this.elt.tabIndex > 0)
				this.tabIndex = this.elt.tabIndex;
			if(! this.field) {
				if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
			}
			this.initSelectedKeys();
			this.set_up = true;
		},
		initOptions: function() {
			if(this.options) {
				if(YLang.isString(this.options)) {
					if(UI.select_options[this.options])
						this.options = UI.select_options[this.options];
					else
						console.error("select options not found: "+this.options);
				} else if(! (this.options instanceof SelectOptions)) {
					this.options = new SelectOptions(this.options);
				}
			}
		},
		
		validate: function() {
			this.invalid = false;
			var value = this.getSelectedKeys();
			if (this.required && !value.length) {
				this.invalid = true;
				this.invalidMsg = 'required';
			}
			this.updateDisplay();
			return ! this.invalid;
		},


		getOptions: function() {
			return this.options;
		},
		setOptions: function(opts) {
			this.options = opts;
			this.initOptions();
			if(this.rendered)
				this.renderOptions();
		},
		addOption: function(key, value) {
			if(this.keys)
				this.keys.push(key);
			var o = this.getOptions(), ret;
			if(o) {
				ret = o.addOption(key, value);
				if(this.rendered) this.renderOptions();
			}
			return ret;
		},
		initSelectedKeys: function() {
			if(! this.field) return;
			var val = this.field.value;
			vals = val.split('^,^');
			this.setSelectedKey(vals, true, true);
		},
		getSelectedIndex: function() {
			return this.last_selected_index;
		},
		getSelectedIndexes: function() {
			return this.selected_indexes.slice(0);
		},
		getDisabledIndexes: function() {
			return this.disabled_indexes.slice(0);
		},
		getSelectedKey: function() {
			var k = this.getKeys();
			return k[this.last_selected_index];
		},
		getSelectedValue: function() {
			var o = this.getOptions();
			if(o) return o.getValue(this.getSelectedKey());
		},
		getSelectedKeys: function() {
			var k = this.getKeys();
			var sel = [];
			for(var i = 0; i < this.selected_indexes.length; i++)
				sel.push(k[this.selected_indexes[i]]);
			return sel;
		},
		getDisabledKeys: function() {
			var k = this.getKeys();
			var sel = [];
			for(var i = 0; i < this.disabled_indexes.length; i++)
				sel.push(k[this.disabled_indexes[i]]);
			return sel;
		},
		getKeys: function() {
			if(this.keys)
				return this.keys;
			var o = this.getOptions();
			if(o) return o.getKeys();
			return [];
		},
		getKeyIndex: function(key) {
			var k = this.getKeys();
			if(k)
				return k.indexOf(key);
			return -1;
		},
		hasKey: function(key) {
			return (this.getKeyIndex(key) >= 0);
		},
		getValues: function(keys) {
			if(! isset(keys))
				keys = this.getKeys();
			var o = this.getOptions();
			if(o) return o.getValues(keys);
			return [];
		},
		getValue: function(key) {
			return this.getOptions().getValue(key);
		},
		getCurrentIndex: function(idx) {
			return this.current_index;
		},
		adjustCurrentIndex: function(adj, nowrap) {
			if(! adj) adj = 0;
			if(! isset(this.current_index)) {
				/*if(isset(this.last_selected_index))
					this.setCurrentIndex(this.last_selected_index + adj);
				else
					this.setCurrentIndex(0);*/
				this.setCurrentIndex(adj == 1 ? 0 : adj, nowrap);
			} else if(this.current_index == 0 && adj < 0) {
				if(! nowrap) this.setCurrentIndex(null);
			} else
				this.setCurrentIndex(this.current_index + adj, nowrap);
		},
		setCurrentIndex: function(idx, nowrap) {
			var old = this.current_index;
			if(isset(idx)) {
				var k = this.getKeys();
				if(idx < 0) {
					if(! nowrap)
						idx = k.length + idx;
					if(idx < 0)
						idx = nowrap ? 0 : null;
				}
				if(idx >= k.length) {
					idx = nowrap ? k.length - 1 : null;
				}
			} else
				idx = null;
			this.current_index = idx;
			this.updateOptionsState([old, idx]);
			this.showCurrent();
			UI.callEvent(this, this.oncurrent, idx);
		},
		getRowData: function(indexes) {
			var keys = this.getKeys();
			var qkeys;
			if(isset(indexes)) {
				qkeys = [];
				for(var i = 0; i < indexes.length; i++)
					qkeys.push(keys[indexes[i]]);
			} else
				qkeys = keys;
			var values = this.getValues(qkeys);
			var selected = this.getSelectedIndexes();
			var disabled = this.getDisabledIndexes();
			var sel_map = {}, dis_map = {};
			for(var i = 0; i < selected.length; i++)
				sel_map[selected[i]] = 1;
			for(var i = 0; i < disabled.length; i++)
				dis_map[disabled[i]] = 1;
			var ret = [];
			var sel = 0, dis = 0;
			for(var i = 0; i < qkeys.length; i++) {
				var key = qkeys[i];
				var idx = isset(indexes) ? indexes[i] : i;
				sel = !! sel_map[idx];
				dis = !! dis_map[idx];
				var status = {selected: sel, disabled: dis, current: idx == this.current_index};
				ret.push({key: key, value: values[i], status: status, index: idx});
				sel = dis = 0;
			}
			return ret;
		},
		setColumns: function(cols) {
			if(cols)
				this.columns = cols.slice(0);
		},
		getColumns: function() {
			var src = this.columns;
			var default_column = 'label';
			var o = this.getOptions();
			if(o && o.display_name) default_column = o.display_name;
			if(! src && o) src = o.columns;

			var cols = [];
			if(this.show_checks)
				cols.push({type: 'check', width: '18px'});
			if(src) {
				for(var i = 0; i < src.length; i++) {
					var c = src[i];
					if(typeof(c) == 'string')
						cols.push({name: c /*, icon: value.icon ? 'icon' : ''*/ });
					else
						cols.push(c);
				}
			} else {
				if(this.icon_key)
					cols.push({name: this.icon_key, type: 'icon'});
				cols.push({name: default_column});
			}
			return cols;
		},
		getWidth: function() {
			if(this.width)
				return UI.formatSize(this.width);
			var o = this.getOptions()
			if(o && o.width)
				return UI.formatSize(o.width);
			if(this.popup)
				return '150px';
		},
		render: function() {
			if(this.rendered)
				return this.elt;
			if(! this.elt) {
				if(! (this.elt = $(this.id)) ) {
					var cls = this.className ? this.className : (this.popup ? 'select-menu' : 'input-select-multi') + ' input-outer';
					this.elt = createElement2('div', {id: this.id, className: cls});
				}
			}
			var me = this;
			var params = {
				onkeydown: function(evt) { me.keyDown(evt || window.event); },
				onkeyup: function(evt) { me.keyUp(evt || window.event); },
				onkeypress: function(evt) { me.keyPress(evt || window.event); },
				onmousedown: function(evt) { me.mouseDown(evt || window.event); },
				onmousewheel: function(evt) { me.mouseWheel(evt || window.event); }
			};
			if(! this.popup) {
				params.onfocus = function(evt) { me.handleFocus(evt); };
				params.onblur = function(evt) { me.handleBlur(evt); };
			}
			if(this.tabIndex)
				params.tabIndex = this.tabIndex;
			setAttrs(this.elt, params);
			if(! this.scroll_panel) {
				var keys = this.getKeys();
				/*if(this.elt.firstChild && YDom.hasClass(this.elt.firstChild, 'input-scroll'))
					this.scroll_panel = new ScrollPanel(this.elt.firstChild, {step: this.option_height, steps: keys.length - this.rows + 1});
				else*/
				var scrcls = 'select-inner';
				if((this.popup && ! this.allow_scroll) || this.no_scroll)
					scrcls += ' hidden';
				this.scroll_panel = new ScrollPanel(this.id+'-scroll', {ext_class: scrcls, step: this.option_height, steps: (keys ? keys.length : 0) - this.rows + 1});
				this.scroll_panel.onclick = function(evt) { me.focus(); }
			}
			this.scroll_panel.setup();
			var panel = this.scroll_panel.render();
			if(! panel)
				return;
			this.elt.appendChild(panel);
			//this.setPanelHeight();
			var inner = this.scroll_panel.content;
			var w = this.getWidth();
			if(w) inner.style.width = w;
			if(! this.opts_table) {
				if(inner.firstChild && YDom.hasClass(this.elt.firstChild, 'select-rows'))
					this.opts_table = inner.firstChild;
				else {
					// moz raises unknown value for 'top'/'height' warnings when creating table - not sure why
					this.opts_table = createElement2('table', {className: 'select-rows', width: '100%'});
					inner.appendChild(this.opts_table);
				}
			}
			this.renderOptions();
			this.rendered = true;
			return this.elt;
		},
		focus: function() {
			if(this.elt)
				this.elt.focus();
		},
		handleFocus: function(evt) {
			if(! this.focused) {
				this.focused = true;
				UI.callEvent(this, this.onfocus, evt);
				this.updateOptionsState();
			}
		},
		handleBlur: function(evt) {
			if(this.focused) {
				this.focused = false;
				UI.callEvent(this, this.onblur, evt);
				this.updateOptionsState();
			}
		},
		setPanelHeight: function() {
			var r = this.rows || this.visible_rows;
			if(r && this.scroll_panel && this.scroll_panel.elt) {
				this.scroll_panel.elt.style.height = '' + (r * this.option_height + (this.popup ? -1 : 1)) + 'px';
				this.scroll_panel.setSteps(this.getKeys().length - r + 1, this.current_index);
				if((! this.popup || ! this.allow_scroll) && ! this.no_scroll) {
					UI.addRemoveClass(this.scroll_panel.elt, 'hidden', r >= this.getKeys().length);
				}
			}
		},
		handleResize: function(pos, viewp) {
			var maxh = viewp.height;
			this.visible_rows = Math.min(this.getKeys().length, Math.floor((maxh - 5) / (this.option_height+1)));
			this.setPanelHeight();
		},
		keyDown: function(evt) {
			// cmd = 91, 93, 224
			// shift = 16
			// ctrl = 17
			if(evt.keyCode == 38) nav = -1;
			else if(evt.keyCode == 40) nav = 1;
			else nav = 0;
			if(nav) {
				this.adjustCurrentIndex(nav);
				YEvent.stopEvent(evt);
			} else if(evt.keyCode == 32 || (this.popup && evt.keyCode == 13)) {
				if(isset(this.current_index))
					this.toggleSelected(this.current_index);
				YEvent.stopEvent(evt);
			} else if(evt.keyCode == 27) {
				this.cancel();
				YEvent.stopEvent(evt);
			}
			UI.callEvent(this, this.onkeydown, evt);
		},
		keyUp: function(evt) {
			UI.callEvent(this, this.onkeyup, evt);
		},
        keyPress: function(evt) {
            if(evt.charCode) {
                var last = this.keypress_time,
                    cur = new Date().getTime(),
                    pfx = this.keypress_buffer;
                if(! last || cur - last > 400)
                    pfx = '';
                this.keypress_buffer = pfx + String.fromCharCode(evt.charCode).toLowerCase();
                this.keypress_time = cur;
                var key = this.findKeyPrefix(this.keypress_buffer);
                if (! isset(key)) {
                    this.setCurrentIndex(null);
                    key = this.findKeyPrefix(this.keypress_buffer);
                }
                if(isset(key))
                    this.setCurrentIndex(this.getKeyIndex(key));
            } else {
                UI.callEvent(this, this.onkeypress, evt);
            }
        },
        findKeyPrefix: function(pfx) {
            var ks, i, l = pfx.length, sel = this.getSelectedKey(), first;
            if(! l || ! (ks = this.getKeys())) return;
            var curr_idx = this.getCurrentIndex();
            for(i = 0; i < ks.length; i++) {
                if(ks[i] === sel)
                    continue;
                var val = this.getValue(ks[i]);
                if(YLang.isString(val) && val.substring(0, l).toLowerCase() === pfx) {
                    var key_idx = this.getKeyIndex(ks[i]);
                    if (key_idx == curr_idx || key_idx < curr_idx)
                        continue;
                    if(! isset(first)) first = ks[i];
                }
            }
            return first;
        },
		mouseDown: function(evt) {
			if(! this.focused)
				this.focus();
			UI.callEvent(this, this.onmousedown, evt);
		},
		mouseWheel: function(evt) {
			if(! this.focused) return;
			var delta = 0, abs, max, multi, didx = 0;
			if(evt.wheelDelta) {
				delta = evt.wheelDelta/120;
				if(window.opera) // opera 9
					delta = -delta;
			} else if(evt.detail) { // mozilla
				delta = -evt.detail/3;
			}
			abs = Math.abs(delta);
			if(abs > 0.1) {
				var now = (new Date()).getTime();
				if(Math.round(abs) != abs) {
					max = now - 40; // likely a trackpad
					multi = true;
				}
				else if(abs == 1)
					max = now - 150; // higher delay for fine control
				else if(abs > 20)
					max = now - 20; // lower delay for fast spinning
				else
					max = now - 100;
				if(! this.lastWheel || this.lastWheel < max) {
					if(multi)
						didx = Math.round(- delta);
					if(didx == 0)
						didx = delta < 0 ? 1 : -1;
					this.adjustCurrentIndex(didx, true);
					this.lastWheel = now;
				}
			}
			YEvent.stopEvent(evt);
		},
		showCurrent: function() {
			if(this.scroll_panel && isset(this.current_index)) {
				this.scroll_panel.showStep(this.current_index);
			}
		},
		cancel: function() {
			if(! this.popup)
				this.setCurrentIndex(null);
			UI.callEvent(this, this.oncancel);
		},
		destroy: function() {
			UI.domRemoveElt(this.elt);
			this.elt = null;
			this.rendered = false;
			if(this.scroll_panel) this.scroll_panel.destroy();
			this.scroll_panel = null;
			this.opts_table = null;
			this.visible_rows = null;
			this.focused = false;
			UI.callEvent(this, this.ondestroy);
		},
		selectCurrent: function() {
			if(isset(this.current_index)) {
				this.setSelected(this.current_index);
				return true;
			}
		},
		setSelected: function(index, silent, nosource) {
			this.selected_indexes = [];
			this.last_selected_index = null;
			this.toggleSelected(index, 1, silent, nosource);
		},
		toggleSelected: function(index, state, silent, nosource) {
			var oldSel = this.multi_select ? this.selected_indexes : this.last_selected_index;
			if(! isset(state)) state = -1;
			else if(state !== -1) state = state ? 1 : 0;
			if(isset(index)) {
				if(! YLang.isArray(index))
					index = [index];
				var keys = this.getKeys();
				var selPos = {}, sel = this.getSelectedIndexes();
				for(var i = 0; i < sel.length; i++)
					selPos[sel[i]] = i;
				var idx, remove = [];
				for(var i = 0; i < index.length; i++) {
					idx = index[i];
					if(idx < 0 || idx >= keys.length)
						continue;
					if(isset(selPos[idx])) {
						remove.push(selPos[idx]);
						if(state < 1)
							delete selPos[idx];
						else {
							selPos[idx] = sel.length;
							this.last_selected_index = idx;
							sel.push(idx);
						}
					} else if(state) {
						selPos[idx] = sel.length;
						this.last_selected_index = idx;
						sel.push(idx);
					}
				}
				remove.sort();
				for(var i = 0; i < remove.length; i++)
					sel.splice(remove[i], 1);
				if(! this.multi_select && sel.length > 1)
					sel = [sel.pop()];
				this.selected_indexes = sel;
			}
			this.updateOptionsState();
			if(! nosource && this.field) {
				var selKeys = [];
				if(isset(index)) {
					for(var k=0; k < sel.length; k++) {
						selKeys.push(keys[sel[k]]);
					}
				}
				this.field.value = selKeys.join('^,^');
			}
			if(! silent)
				UI.callEvent(this, this.onchange, oldSel);
		},
		setSelectedKey: function(keys, silent, nosource) {
			var idx = [];
			if(! YLang.isArray(keys))
				keys = [keys];
			for(var i = 0; i < keys.length; i++)
				idx.push(this.getKeyIndex(keys[i]));
			//alert(JSON.stringify(this.getOptions().getKeys()) + ', ' + JSON.stringify(keys));
			this.setSelected(idx, silent, nosource);
		},
		renderOptions: function() {
			var table = this.opts_table;
			if(! table)
				return;

			var columns = this.getColumns();
			while(table.rows.length)
				table.deleteRow(0);
			for(var i = 0; i < table.childNodes.length; i++) {
				if(table.childNodes[i].tagName == 'COLGROUP') {
					table.removeChild(table.childNodes[i]);
					break;
				}
			}

			var cg = createElement2('colgroup');
			for(var i = 0; i < columns.length; i++) {
				var cdef = columns[i];
				var c = createElement2('col');
				if(cdef.width)
					UI.setWidth(c, cdef.width);
				else if(cdef.type == 'icon')
					c.style.width = '20px';
				cg.appendChild(c);
			}
			table.appendChild(cg);

			var rows = this.getRowData();
			for(var i = 0; i < rows.length; i++) {
				var opt = this.renderOption(rows[i], columns, null);
				if(opt)
					table.appendChild(opt);
			}

			/*if(this.popup) {
				var viewp = UI.getViewport();
				this.handleResize(null, viewp); // calls setPanelHeight
			} else*/
				this.setPanelHeight();
		},
		renderOption: function(row, columns, elt) {
			var value = row.value, dn = this.getOptions().display_name || 'label', v;
			if (typeof(value) != 'object') value = '' + value;
			if(typeof(value) == 'string') {
				v = {}; v[dn] = value;
				value = v;
			}

			var extCls = [];
			for(var k in row.status) {
				if(row.status[k])
					extCls.push(k);
			}
			extCls = extCls.join(' ');

			if(! elt)
				elt = createElement2('tr', {className: 'select-option-row '+extCls});
			else {
				while(elt.cells.length)
					elt.removeCell(0);
			}
			elt.optinfo = {scroll: this, key: row.key, value: value, index: row.index};
			for(var evt in SelectList.option_events) {
				var handler = (this.events && isdef(this.events[evt]))
					? this.events[evt] : SelectList.option_events[evt];
				if(handler)
					elt[evt] = handler;
				else if(elt[evt])
					delete elt[evt];
			}

			for(var ci = 0; ci < columns.length; ci++) {
				var cdef = columns[ci];
				var t = cdef.type;
				var colcls, lbl;
				if(t == 'check' || t == 'icon')
					colcls = 'select-icon-cell';
				else
					colcls = '';
				var col = createElement2('td', {className: 'select-option ' + colcls});
				if(cdef.align)
					col.style.textAlign = cdef.align;
				if(t == 'check')
					col.appendChild(createElement2('div', {className: 'input-icon icon-check'}));
				else if(t == 'icon')
					col.appendChild(UI.createIcon(value[cdef.name]));
				else {
					colcls = 'select-option-inner input-bounded';
					if(cdef.icon) colcls += ' with-icon';
					if(cdef.icon) {
						col.appendChild(UI.createIcon(value[cdef.icon] + ' select-option-icon left'));
					}
					// this.renderOptionLabel?
					if(value) {
						lbl = createElement2('span', {className: 'input-label'});
						lbl.appendChild(document.createTextNode(get_default(value[cdef.name], '')));
						col.appendChild(lbl);
					} else
						lbl = null;
					col.appendChild(createElement2('div', {className: colcls}, lbl));
				}
				elt.appendChild(col);
			}
			return elt;
		},
		updateOptionsState: function(indexes) {
			// update non-destructively if possible
			if(! this.opts_table) return;
			var std = {'selected':1, 'current':1, 'disabled':1};
			var done = {};
			var rows = this.getRowData(indexes);
            var table_rows = this.opts_table.getElementsByTagName("tr");
            for(var i = 0; i < rows.length; i++) {
				var row = rows[i];
				if(done[row.index]) continue;
				done[row.index] = 1;
                var tr = table_rows[row.index];
				if(! tr) continue;
				var cls = [];
				var parts = tr.className.split(/\s+/);
				for(var p = 0; p < parts.length; p++) {
					var c = parts[p];
					if(c && ! std[c]) {
						if(c == 'active' && ! row.status.current)
							continue;
						cls.push(c);
					}
				}
				for(var c in std) {
					if(c == 'current' && ! this.focused)
						continue;
					if(row.status[c])
						cls.push(c);
				}
				tr.className = cls.join(' ');
			}
		},
		optionClick: function(elt, optinfo) {
			this.toggleSelected(optinfo.index);
			// add short animation (blink)
			//SUGAR.popups.hidePopup();
		},
		optionEvent: function(elt, info, state) {
			if(this.current_index === info.index) {
				if(state == 'out') {
					this.setCurrentIndex(null);
				}
				else if(state == 'down') {
					YDom.addClass(elt, 'active');
				}
				else if(state == 'up') {
					YDom.removeClass(elt, 'active');
				}
			}
			else if(state == 'over') {
				this.setCurrentIndex(info.index);
			}
		},
		modeUpdated: function(mode) {
			this.updateDisplay();
		},
		updateDisplay: function() {
			if(this.mode_field) {
				toggleDisplay(this.elt, !! this.mode_field.getValue());
			}
		}
	};


	// FIXME - inherit from MenuSource
	var SelectInput = UI.SelectInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.menu_id = this.id + '-popup';
		this.onchange = null;
		this.show_checks = true;
		this.close_on_exit = true;
		var options;
		if(params && params.options) {
			options = params.options;
			delete params.options;
		} else
			options = '';
		if(params) YLang.augmentObject(this, params, true);
		if(! this.menu) {
			if(options instanceof SelectList)
				this.menu = options;
			else
				this.menu = new SelectList(this.menu_id, {
					options: options, popup: true, show_checks: this.show_checks,
					className: this.popup_class_name, icon_key: this.icon_key});
		}
	}
	SelectInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt)
				this.elt = $(this.id);
			if(! this.field) {
				if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
			}
			if(! this.outer) {
				if(this.outer_id)
					this.outer = $(this.outer_id);
				else
					this.outer = this.elt;
			}
			if(this.menu) {
				if(this.elt && this.elt.tabIndex)
					this.menu.tabIndex = this.elt.tabIndex;
				else if(! this.menu.tabIndex)
					this.menu.tabIndex = 1;
				this.menu.setup();
			}
			if(this.dynamic_module && ! this.module_field) {
				this.module_field = this.form.elements[this.dynamic_module];
			}
			if(! this.elt)
				return;
			this.addHooks();
			this.set_up = true;
		},
		addHooks: function() {
			if(this.elt) {
				YEvent.addListener(this.elt, 'mousedown', function(evt) { YEvent.stopPropagation(evt); }, this, true);
				YEvent.addListener(this.elt, 'click', this.handleClick, this, true);
				YEvent.addListener(this.elt, 'focus', this.handleFocus, this, true);
				YEvent.addListener(this.elt, 'blur', this.handleBlur, this, true);
				YEvent.addListener(this.elt, 'keypress', this.handleKeyPress, this, true);
			}
		},
		getField: function() {
			return this.field;
		},
		getValue: function() {
			return (this.field ? this.field.value : get_default(this.init_value, null));
		},
		getOptionValue: function(key) {
			if(! isset(key)) key = this.getValue();
			return this.menu ? this.menu.getValue(key) : key;
		},
		setValue: function(key, silent) {
			var v = key;
			if(this.menu && ! (v = this.menu.getValue(key))) {
				console.error(this.id + ' key not defined: ' + key);
				return;
			}
			this.update(key, v, silent);
		},
		setOptions: function(opts) {
			if(this.menu) return this.menu.setOptions(opts);
		},
		focus: function() {
			if(this.elt) this.elt.focus();
		},
		handleClick: function(evt) {
			this.showPopup();
		},
		handleFocus: function(evt) {
			if(! this.focused) {
				this.focused = true;
				UI.callEvent(this, this.onfocus, evt);
			}
			this.updateDisplay();
		},
		handleBlur: function(evt) {
			if(this.focused) {
				this.focused = this.menu && this.menu.focused;
				if(! this.focused)
					UI.callEvent(this, this.onblur, evt);
			}
			this.updateDisplay();
		},
		handleKeyPress: function(evt) {
			if(evt.charCode) {
				var last = this.keypress_time,
					cur = new Date().getTime(),
					pfx = this.keypress_buffer;
				if(! last || cur - last > 400)
					pfx = '';
				this.keypress_buffer = pfx + String.fromCharCode(evt.charCode).toLowerCase();
				this.keypress_time = cur;
				var key = this.findKeyPrefix(this.keypress_buffer);
				if(isset(key))
					this.setValue(key);
			}
		},
		findKeyPrefix: function(pfx) {
			var ks, i, l = pfx.length, sel = this.getValue(), first, foundsel;
			if(! l || ! this.menu || ! (ks = this.menu.getKeys())) return;
			for(i = 0; i < ks.length; i++) {
				if(ks[i] === sel) {
					foundsel = true;
					continue;
				}
				var val = this.menu.getValue(ks[i]);
				if(YLang.isString(val) && val.substring(0, l).toLowerCase() === pfx) {
					if(foundsel) return ks[i];
					if(! isset(first)) first = ks[i];
				}
			}
			return first;
		},
		getTargetOffset: function(target) {
			var btnpos = UI.getEltRegion(target || this.elt);
			var viewp = UI.getViewport();
			var top = - this.menu.getSelectedIndex() * this.menu.option_height - 2;
			top = Math.max(viewp.y - (btnpos ? btnpos.top : 0) + 10, top);
			return {top:top, left:-19, over: true};
		},
		showPopup: function(timeout, target, offset) {
			this.selected = this.getValue();

			if(! this.menu)
				return;
			this.menu.setSelectedKey(this.selected, true);
			this.menu.setCurrentIndex(this.menu.getSelectedIndex());
			var menu_elt = this.menu.render();
			if(! menu_elt)
				return;
			var input = this;
			this.menu.onchange = function() {
				if(input.popup) {
					input.popup.onhide = null;
					input.popup.close();
				}
				this.destroy();
				input.focus();
				input.update(this.getSelectedKey(), this.getSelectedValue());
			}
			this.menu.oncancel = function(menu) {
				if(input.popup) {
					input.popup.onhide = null;
					input.popup.close();
				}
				this.destroy();
				input.focus();
			}
			document.body.appendChild(menu_elt);

			var p = new Popup(this.id + '-popup', {
				content_elt: menu_elt,
				target: target || this.elt, target_offset: offset || this.getTargetOffset(target),
				destroy_on_close: true, close_on_exit: this.close_on_exit,
				max_width: this.max_width, stacked: this.show_stacked});
			p.onhide = function() {
				input.popup = null;
				input.menu.cancel();
			}
			p.onfocus = function() {
				input.menu.handleFocus();
			}
			p.onblur = function() {
				input.menu.handleBlur();
			}
			p.onresize = function(pos, viewp) {
				input.menu.handleResize(pos, viewp);
			}
			this.popup = p;
			p.show();
		},
		update: function(key, value, silent) {
			var changed = true;
			if(this.field) {
				if(this.field.value == key)
					changed = false;
				this.field.value = key;
			}
			if(this.dynamic_module && this.module_field) {
				var dmod = YLang.isObject(value) ? value[this.dynamic_module] : null;
				this.module_field.value = dmod || '';
			}

			this.updateLabel(key, value);
			if(! silent)
				UI.callEvent(this, this.onchange, key, value, changed);

			this.validate();
			if(! silent && this.auto_submit && changed)
				UI.submitForm(this.form);
		},
		updateLabel: function(key, value) {
			var lbl_key = this.label_key || 'name';
			var slbl_key = this.slabel_key || 'symbol';
			var icon_key = this.icon_key || 'icon';
			var icon = '', slabel = '', label = '';
			if(typeof(value) != 'object')
				label = '' + value;
			else if(value) {
				label = value[lbl_key];
				slabel = value[slbl_key];
				icon = value[icon_key];
			}
			var slb_tg = $(this.id + '-short');
			if(slb_tg)
				UI.setElementText(slb_tg, slabel);
			var lbl_tg = this.label_field || $(this.id + '-label');
			if(lbl_tg)
				UI.setElementText(lbl_tg, label);
			else {
				if(this.elt)
					this.elt.title = label;
			}
			if(! this.static_icon) {
				var ico = $(this.id + '-icon');
				if(ico) {
					ico.className = 'input-icon left '+icon;
				}
			}
		},
		validate: function() {
			this.invalid = false;
			var value = this.getValue();
			if(! isset(value)) value = '';
			var have_val = trim(value).length;
			if(this.required && ! have_val) {
				this.invalid = true;
				this.invalidMsg = 'required';
			} else if(have_val && ! this.update_from_popup) {
				// check value is in options
				if(this.menu && this.menu.getKeyIndex(value) == -1) {
					this.invalid = true;
					this.invalidMsg = '';
				}
			}
			this.updateDisplay();
			return ! this.invalid;
		},
		updateDisplay: function() {
			UI.addRemoveClass(this.elt, 'invalid', !! this.invalid);
			UI.addRemoveClass(this.elt, 'active', !! this.focused);
		},
		render: function() {
			if(! this.field) {
				this.field = createElement2('input', {type: 'hidden', name: this.name, value: this.init_value});
			}
			if(! this.elt) {
				var lbl_style = '';
				if(this.width) lbl_style += 'width: '+UI.formatSize(this.width)+';';
				if(this.max_width) lbl_style += 'max_width: '+UI.formatSize(this.max_width)+';';
				this.elt = createElement2('button', {className: 'input-select input-outer', type:'button', id:this.id},
					createElement2('div', {className: 'input-arrow select-label', style: lbl_style},
						(this.label_field = createElement2('span', {className: 'input-label', id: this.id + '-label'}))));
				this.setup();
			}
			var key = this.getValue();
			this.updateLabel(key, this.getOptionValue() || '');
			return this.elt;
		},
		destroy: function() {
			if(this.popup) this.popup.destroy();
			this.popup = null;
			if(this.menu) this.menu.destroy();
			this.menu = null;
			YEvent.purgeElement(this.elt);
			this.elt = this.outer = null;
			this.field = null;
		},
		setDisabled: function(disabled) {
			if(! isset(disabled)) disabled = 1;
			this.disabled = !! disabled;
			if(this.elt) this.elt.disabled = disabled;
		}
	};


	var QuickSelect = UI.QuickSelect = function(params) {
		var id = params.id || 'quicksel-'+(++ QuickSelect.uniq_idx);
		SelectInput.call(this, id, params);
	}
	QuickSelect.uniq_idx = 0;
	YLang.extend(QuickSelect, SelectInput, {
		init: function(key, onchange, oncancel) {
			this.key = key;
			this.onchange = onchange;
			this.oncancel = oncancel;
			this.set_up = false;
			this.setup();
		},
		initSource: function(source, key, onchange, oncancel) {
			this.elt = source;
			this.init(key, onchange, oncancel);
		},
		getValue: function() {
			return this.key;
		},
		update: function(key, value, silent) {
			this.key = key;
			if(YLang.isObject(value)) {
				var lkey = this.label_key || this.menu.options.display_name || 'name';
				value = value[lkey];
			}
            if (this.elt)
                UI.setElementText(this.elt, value);
			SelectInput.prototype.update.call(this, key, value, silent);
		}
		// inherits showPopup(timeout, target, offset)
	});


	var MenuSource = UI.MenuSource = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id || ('menu-source-' + (++ MenuSource.menu_index));
		} else
			this.id = id;
		this.menu_id = this.id + '-popup';
		this.show_checks = false;
		this.hover_show = false;
		this.delay = 0;
		this.icon_key = null;
		this.onchange = null;
		this.now_selecting = false;
		if(params && params.options) {
			options = params.options;
			delete params.options;
		} else
			options = '';
		if(params) YLang.augmentObject(this, params, true);
		if(! this.menu) {
			if(options instanceof SelectList)
				this.menu = options;
			else
				this.menu = new SelectList(this.menu_id,
					{options: options, no_scroll: true, popup: true,
						show_checks: this.show_checks,
						icon_key: this.icon_key,
						className: 'select-menu input-outer flat-top'});
		}
		if(this.hover_show && isIPhone)
			this.hover_show = false;
	}
	MenuSource.menu_index = 0;
	MenuSource.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt)
				this.elt = $(this.id);
			if(! this.elt)
				return;
			var input = this;
			if(this.hover_show) {
				this.elt.onmouseover = function() {
					if(input.now_selecting)
						return false;
					var p = UI.PopupManager.last_opened;
					if(p && ! p.modal && ! p.close_on_exit)
						return; // don't trigger popup when a semi-persistent one is open, or it will be dismissed
					input.showPopup(input.delay);
				}
			} else {
				this.elt.onmousedown = function(evt) { YEvent.stopEvent(evt || window.event); }
				this.elt.onclick = function(evt) {
					var target = YEvent.getTarget(evt || window.event);
					if(target && target.name == 'check-all') { return null; }
					if(input.now_selecting)
						input.closePopup();
					else
						input.showPopup();
				}
			}
			if(this.menu) {
				if(this.elt.tabIndex)
					this.menu.tabIndex = this.elt.tabIndex;
				else if(! this.menu.tabIndex)
					this.menu.tabIndex = 1;
				this.menu.setup();
			}
			this.set_up = true;
		},
		focus: function() {
			if(this.elt) this.elt.focus();
		},
		getSelected: function() {
			return this.init_value || null;
		},
		showPopup: function(timeout) {
			this.selected = this.getSelected();
			if(this.popup)
				this.popup.close();

			if(! this.menu)
				return;
			this.menu.setSelectedKey(this.selected, true);
			this.menu.setCurrentIndex(this.menu.getSelectedIndex());
			var menu_elt = this.menu.render();
			if(! menu_elt)
				return;
			var input = this;
			this.menu.onchange = function() {
				input.handleSelect(this.getSelectedKey(), this.getSelectedValue());
			}
			this.menu.oncancel = function() {
				input.handleCancel();
			}
			document.body.appendChild(menu_elt);

			var p = this.createPopup(menu_elt);
			p.onclose = p.oncancelshow = function() {
				input.handleClosePopup();
			}
			p.onfocus = function() {
				input.menu.handleFocus();
			}
			this.popup = p;
			this.now_selecting = true;
			this.popup.show(timeout);
		},
		getPopupOffset: function() {
			return this.target_offset; // unspecified by default, can be set in params
		},
		createPopup: function(menu_elt) {
			var top = 0;//- this.menu.getSelectedIndex() * this.menu.option_height - 1;
			return new Popup(menu_elt, {target: this.elt,
					target_offset: this.getPopupOffset(),
					customDisplayTransform: 'scaleY(0.4)',
					destroy_on_close: false
			});
		},
		handleSelect: function(key, value) {
			this.last_selected = key;
			this.now_selecting = false;
			this.closePopup();
			if(! value)
				return;
			if(UI.callEvent(this, this.onchange, key, value) === false)
				return;
			if(value.confirm) {
				if(! confirm(value.confirm))
					return;
			}
			if(value.perform) {
				UI.callEvent(this, value.perform, key, value);
			}

			this.now_selecting = false;
		},
		handleCancel: function() {
			this.now_selecting = false;
			this.closePopup();
			UI.callEvent(this, this.oncancel);
		},
		closePopup: function() {
			if(this.popup)
				this.popup.close();
		},
		handleClosePopup: function() {
			if(this.menu) {
				if(this.now_selecting)
					this.menu.cancel();
				this.menu.destroy();
			}
		},
		render: function() {
			// draw select input according to params
		},
		destroy: function() {
			if(this.popup) this.popup.destroy();
			this.popup = null;
			if(this.menu) this.menu.destroy();
			this.menu = null;
			YEvent.purgeElement(this.elt);
			UI.domRemoveElt(this.elt);
			this.elt = null;
			UI.callEvent(this, this.ondestroy);
		}
	};


	var RefInput = UI.RefInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.allow_custom = false;
		this.allow_rename = false;
		this.allow_clear = true;
		this.track_view = true;
		this.name_column = '_display';
		this.focused = false;
		this.hovered = false;
		this.invalid = false;
		this.module = null;
		if(params) YLang.augmentObject(this, params, true);
	}
	RefInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt)
				this.elt = $(this.id);
			if(! this.field) {
				if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
			}
			if(! this.key_field) {
				if(this.key_name && this.form)
					this.key_field = this.form.elements[this.key_name];
				else if(this.key_id)
					this.key_field = $(this.key_id);
			}
			if(! this.module_field) {
				if(this.form && this.module_field_name)
					this.module_field = UI.getFormInput(this.form, this.module_field_name);
			}
			if(! this.elt)
				return;
			if(! this.inputContain) {
				var elts = YDom.getElementsByClassName('input-name', 'div', this.elt);
				if(elts)
					this.inputContain = elts[0];
			}
			if(! this.selectButtonOuter) {
				var elts = YDom.getElementsByClassName('input-select-button', 'div', this.elt);
				if(elts) {
					this.selectButtonOuter = elts[0];
					this.selectButton = this.selectButtonOuter.firstChild;
				}
			}
			if(! this.clearButton) {
				var elts = YDom.getElementsByClassName('ref-clear-button', 'a', this.elt);
				if(elts)
					this.clearButton = elts[0];
			}
			if(! this.moduleButton && this.module_field) {
				this.moduleButton = this.module_field.elt;
			}
			this.set_up = true;
			this.postInit();
		},
		postInit: function() {
			if(this.inputContain && this.moduleButton)
				YDom.addClass(this.inputContain, 'with-module');
			if(this.field) {
				this.field.setAttribute('spellcheck', false);
				this.field.setAttribute('autocomplete', 'off');
			}
			if(this.module_field)
				this.module = this.module_field.getValue();
			this.updateDisplay();
			this.addHooks();
		},
		addExtraReturnFields: function(fs) {
			if(! this.extra_fields)
				this.extra_fields = {};
			for(var k in fs) {
				this.extra_fields[k] = fs[k];
			}
		},
		getExtraReturnFields: function() {
			return this.extra_fields;
		},
		getModule: function() {
			if(this.module_field)
				return this.module_field.getValue();
			return this.module;
		},
		setModule: function(mod) {
			if(this.module_field)
				this.module_field.setValue(mod); // will exec onchange callback
			else
				this.moduleUpdated(mod);
		},
		moduleUpdated: function(mod) {
			if(this.module != mod) {
				this.module = mod;
				this.update(null, null);
			}
		},
		addHooks: function() {
			var input = this;
			this.elt.onmouseover = function(evt) { input.mouseOver(evt || window.event); }
			this.elt.onmouseout = function(evt) { input.mouseOut(evt || window.event); }
			this.elt.onmousedown = function(evt) { input.mouseDown(evt || window.event); }
			var focus = function(evt) { input.handleFocus(evt || window.event); };
			var blur = function(evt) { input.handleBlur(evt || window.event); };
			if(this.field) {
				this.field.onfocus = focus;
				this.field.onblur = blur;
				this.field.onmousedown = function(evt) { input.fieldMouseDown(evt || window.event); }
				this.field.onmouseup = function(evt) { input.fieldMouseUp(evt || window.event); }
				this.field.onkeydown = function(evt) { input.fieldKeyDown(evt || window.event); }
				this.field.onkeyup = function(evt) { input.fieldKeyUp(evt || window.event); }
            }
			if(this.selectButton) {
				this.selectButton.onfocus = focus;
				this.selectButton.onblur = blur;
				this.selectButton.onclick = function() { input.showPopup(); }
			}
			if(this.clearButton) {
				this.clearButton.onfocus = focus;
				this.clearButton.onblur = blur;
				this.clearButton.onclick = function() { input.clear(true); }
			}
			if(this.module_field) {
				this.module_field.onchange = function(k, v, upd) { input.moduleUpdated(k); input.focus(); }
				this.module_field.onfocus = focus;
				this.module_field.onblur = blur;
			}
		},
		fieldMouseDown: function(evt) {
			YEvent.stopPropagation(evt);
		},
		fieldMouseUp: function(evt) {
			if(this.focused && (! this.disabled || this.getKey()))
				this.showSearch();
			//YEvent.stopPropagation(evt);
		},
		fieldKeyDown: function(evt) {
			var nav;
			if(evt.keyCode == 38) nav = -1;
			else if(evt.keyCode == 40) nav = 1;
			else nav = 0;
			if(nav) {
				if(this.searcher)
					this.searcher.adjustCurrentIndex(nav);
				else
					this.showSearch();
				YEvent.stopEvent(evt);
			} else if(evt.keyCode == 13) {
				if(this.searcher) {
					if(! this.searcher.acceptCurrent())
						this.hideSearch();
				}  else
					this.showSearch();
				YEvent.stopEvent(evt);
			} else if(evt.keyCode == 27) {
				if(! this.searcher || ! isset(this.searcher.query)) {
					if (!this.disabled)
						this.clear();
				}
				else
					this.hideSearch(true);
				YEvent.stopEvent(evt);
			}
		},
		fieldKeyUp: function(evt) {
			if(evt.keyCode && evt.keyCode != 27 && evt.keyCode != 13 && evt.keyCode != 9 && evt.keyCode != 16)
				this.updateSearch();
		},
		mouseDown: function(evt) {
			this.focus();
			//YEvent.stopEvent(evt);
		},
		mouseOver: function(evt) {
			this.hovered = true;
			this.updateDisplay();
		},
		mouseOut: function(evt) {
			this.hovered = false;
			this.updateDisplay();
		},
		searchMouseUp: function(evt) {
			if(this.focused === 'search')
				this.field.focus();
		},
		handleFocus: function(evt) {
			var oldf = this.focused;
			if(this.module_field && this.module_field.focused)
				this.focused = 'module';
			else
				this.focused = true;
			this.updateDisplay();
			if(! oldf) {
				if(! this.disabled) {
					this.cancelShowSearch();
					this.saveOrigValue();
					this.showSearchDelayed();
				}
				UI.callEvent(this, this.onfocus, evt);
			}
		},
		handleBlur: function(evt) {
			if(this.searcher && this.searcher.isHovered()) {
				this.focused = 'search';
				return;
			}
			if(this.module_field && this.module_field.focused) {
				this.focused = 'module';
				this.hideSearch();
				return;
			}
			if(this.focused) {
				this.focused = false;
				this.hideSearchDelayed(100);
				UI.callEvent(this, this.onblur, evt);
			}
			this.updateDisplay();
		},
		saveOrigValue: function() {
			this.orig_key = this.getKey();
			this.orig_value = this.getValue();
		},
		updateDisplay: function() {
			var show_clear = false;
			if((this.hovered || (this.focused && this.focused != 'module') || this.show_select) && ! this.disabled) {
				YDom.addClass(this.inputContain, 'with-select');
				if(this.selectButtonOuter) this.selectButtonOuter.style.display = '';
				show_clear = true;
			} else {
				YDom.removeClass(this.inputContain, 'with-select');
				if(this.selectButtonOuter) this.selectButtonOuter.style.display = 'none';
			}
			if (show_clear && (this.getKey() || this.getValue())) {
				YDom.addClass(this.inputContain, 'with-clear');
				if(this.clearButton) this.clearButton.style.display = '';
			} else {
				YDom.removeClass(this.inputContain, 'with-clear');
				if(this.clearButton) this.clearButton.style.display = 'none';
			}
			UI.addRemoveClass(this.elt, 'invalid', this.invalid);
			UI.addRemoveClass(this.elt, 'active', this.focused);
		},
		setDisabled: function(disabled) {
			if(! isset(disabled)) disabled = 1;
			this.disabled = !! disabled;
			if(this.field) this.field.readOnly = this.disabled;
			UI.addRemoveClass(this.elt, 'disabled', this.disabled);
			if(this.disabled) this.hideSearch();
		},
		focus: function() {
			if(this.field)
				this.field.focus();
		},
		select: function() {
			if(this.field) {
				this.field.focus();
				this.field.select();
			}
		},
		cancelShowSearch: function() {
			if(this.searchTimeout) {
				clearTimeout(this.searchTimeout);
				this.searchTimeout = null;
				return true;
			}
		},
		cancelHideSearch: function() {
			if(this.hideSearchTimeout) {
				clearTimeout(this.hideSearchTimeout);
				this.hideSearchTimeout = null;
				return true;
			}
		},
		render: function() {
			if(this.rendered)
				return this.elt;
			if(! this.module_field && this.module_options) {
				// create module dropdown
			}
			if(! this.selectButtonOuter) {
				var o = createElement2('div', {className: 'input-select-button sep-left', style: {display: 'none'}});
				if(! this.selectButton) {
					this.selectButton = createElement2('button', {type: 'button', className: 'input-button compact'});
					this.selectButton.appendChild(createElement2('div', {className: 'input-icon icon-popup'}));
				}
				o.appendChild(this.selectButton);
                this.selectButtonOuter = o;
			}
			if(! this.key_field) {
				this.key_field = createElement2('input', {type: 'hidden', id: this.key_id || '', name: this.key_name || '', value: this.init_key});
			}
			if(! this.field) {
				this.field = createElement2('input', {
					className: 'input-text input-entry', placeholder: '(none)', value: this.init_value,
                    id: this.field_id,
					tabIndex: this.tabIndex, type: 'text', name: this.name, size: this.size || 25
				});
				if(this.disabled)
					this.field.readOnly = true;
			}
			if(! this.clearButton) {
				this.clearButton = createElement2('a', {className: 'input-icon icon-clear ref-clear-button'});
			}
			if(! this.inputContain) {
				var extcls = this.module_field ? ' with-module' : '';
				this.inputContain = createElement2('div', {className: 'input-name with-select'+extcls});
				if(this.key_field)
					this.inputContain.appendChild(this.key_field);
				if(this.field)
					this.inputContain.appendChild(this.field);
			}
			if(! this.elt) {
				this.elt = createElement2('div', {className: 'input-complex input-outer ref-input', id: this.id, style: {width: this.width || '20em'}});
				if(this.disabled)
					this.elt.className += ' disabled';
			}
			if(this.module_field)
				this.elt.appendChild(this.module_field);
			else {
				var icon = this.icon || 'module-'+this.module,
					i = createElement2('div', {className: 'input-icon input-name-icon theme-icon '+icon});
				this.elt.appendChild(i);
			}
			this.elt.appendChild(this.selectButtonOuter);
			this.elt.appendChild(this.clearButton);
			this.elt.appendChild(this.inputContain);
			this.rendered = true;
			this.saveOrigValue();
			this.postInit();

			return this.elt;
		},
		getKey: function() {
			if(this.key_field)
				return this.key_field.value;
		},
		getValue: function() {
			if(this.field)
				return this.field.value;
		},
		getValueDisplay: function(value) {
			if(isset(value)) {
				if(YLang.isString(value)) return value;
				return value[this.name_column];
			}
			return '';
		},
		isBlank: function() {
			if(this.allow_custom) return ! trim(this.getValue()).length;
			return ! trim(this.getKey()).length;
		},
		clear: function(refocus) {
			this.userUpdate(null, null);
			if(refocus) this.focus();
		},
		update: function(key, value, silent) {
			if(this.key_field)
				this.key_field.value = get_default(key, '');
			if(this.field && isdef(value)) {
				this.field.value = this.getValueDisplay(value);
				if(this.focused && this.field.value)
					this.field.select();
			}
			this.saveOrigValue();
			this.hideSearch();
			if(! silent)
				UI.callEvent(this, this.onchange, key, value, this.getPassthru());
			this.validate();
		},
		userUpdate: function(key, value, nofocus) {
			if(! this.focused && ! nofocus)
				this.focus();
			this.update(key, value);
			var do_submit = (this.auto_submit && (key || this.submit_empty));
			if(this.focused && ! do_submit)
				this.showSearchDelayed(1500);
			if(this.track_view)
				this.doTrackView();
			if(do_submit)
				UI.submitForm(this.form);
		},
		doTrackView: function() {
			var mod = this.getModule(), rec = this.getKey();
			if(mod && rec) {
				var req = new SUGAR.conn.JSONRequest('add_recent', {silent: true}, {module: mod, record: rec, source: 'ref'});
				req.fetch();
			}
		},
		rename: function(value, silent) {
			if(this.field && isdef(value)) {
				this.field.value = this.getValueDisplay(value);
				if(this.focused && this.field.value)
					this.field.select();
			}
			this.saveOrigValue();
			this.hideSearch();
			if(! silent)
				UI.callEvent(this, this.onrename, value, this.getPassthru());
			this.validate();
		},
		userRename: function(value, nofocus) {
			if(! this.focused && ! nofocus)
				this.focus();
			this.rename(value);
			if(this.focused)
				this.showSearchDelayed(1500);
		},
		updateSearch: function() {
			this.showSearch();
		},
		showSearchDelayed: function(delay) {
			this.cancelHideSearch();
			var input = this;
			this.searchTimeout = setTimeout(function() { input.showSearch(); }, delay || 1000);
		},
		initSearcher: function() {
			var mod = this.getModule(), self = this;
			this.searcher = new SearchSelect(this.id + '-search',
				{module: mod, target: this.elt, target_offset: {top: -1, left: 20},
				 extra_fields: this.getExtraReturnFields(), filters: this.getFilters(),
				 allow_custom: this.allow_custom, allow_rename: this.allow_rename});
			this.searcher.onchange = function(k, v) {
				self.userUpdate(k, v);
			}
			this.searcher.onrename = function(v) {
				self.userRename(v);
			}
			this.searcher.onmouseup = function(evt) {
				self.searchMouseUp(evt);
			}
		},
		getSearchQuery: function() {
			return this.field ? this.field.value : null;
		},
		showSearch: function() {
			this.cancelShowSearch();
			this.cancelHideSearch();
			var mod = this.getModule();
			if(blank(mod))
				return;
			if(! this.searcher) {
				this.initSearcher();
			} else {
				this.searcher.setModule(mod, true);
				this.searcher.setFilters(this.getFilters());
			}
			this.searcher.render();
			var w = UI.getEltRegion(this.elt);
			if(w)
				this.searcher.setWidth(w.width - 24 + 'px');
			var k = this.getKey(), v = this.getValue();
			this.searcher.setKey(k);
			if(v == this.orig_value && (k || this.allow_custom)) {
				if(! k) this.searcher.setCustomValue(v);
				this.searcher.showDetail();
			}
			else if(! this.disabled)
				this.searcher.setQuery(this.getSearchQuery());
		},
		hideSearchDelayed: function(delay) {
			this.cancelShowSearch();
			this.cancelHideSearch();
			var input = this;
			this.hideSearchTimeout = setTimeout(function() { input.hideSearch(); }, delay || 100);
		},
		hideSearch: function(refocus) {
			this.cancelShowSearch();
			this.cancelHideSearch();
			if(this.searcher) {
				var v = this.getValue();
				if(v != this.orig_value) {
					if((v !== '' && ! this.auto_update) || (v === '' && ! this.allow_clear))
						this.update(this.orig_key, this.orig_value, true);
					else
						this.userUpdate(null, v, ! refocus);
				}
				this.searcher.close();
			}
			if(this.focused && this.field && refocus) {
				this.field.focus();
				this.field.select();
			}
		},
		validate: function(evt) {
			this.invalid = false;
			if(this.required && this.isBlank()) {
				this.invalid = true;
				this.invalidMsg = 'required';
			}
			if(this.customValidate)
				this.customValidate();
			this.updateDisplay();
			return ! this.invalid;
		},
		addFilter: function(filter) {
			if(! this.add_filters) this.add_filters = [];
			this.add_filters.push(filter);
		},
		getFilters: function() {
			if(YLang.isArray(this.add_filters)) {
				var params = {}, c = 0, i, fp, inp;
				for(i = 0; i < this.add_filters.length; i++) {
					fp = this.add_filters[i];
					if(! fp.param) continue;
					if(fp.field_name) {
						inp = UI.getFormInput(this.form, fp.field_name);
						if(inp) {
							params[fp.param] = inp.getValue();
							// FIXME - only key should be necessary, but filter form doesn't currently populate the name
							if(inp instanceof RefInput)
								params[fp.param+'_id'] = inp.getKey();
							c ++;
						}
					}
					else if(isset(fp.value)) {
						params[fp.param] = fp.value;
						c ++;
					}
				}
				if(c) return params;
			}
		},
		getPassthru: function() {
			var p = this.popup_passthru ? deep_clone(this.popup_passthru) : {};
			p.ui_input_name = this.name || this.id;
			return p;
		},
		showPopup: function() {
			var mod = this.getModule(),
				request_data = {
					form_name: this.form.getAttribute('id') || this.form.getAttribute('name'),
					call_back_function: this.popup_callback || 'ui_popup_return',
					passthru_data: this.getPassthru(),
					field_to_name_array: {id: 'id', _display: '_display'}
				},
				params = {module: mod, layout: this.popup_layout, request_data: request_data, inline: true};
			if(! mod)
				return;
			var add_fs = this.getExtraReturnFields();
			if(add_fs) {
				for(i in add_fs) {
					request_data.field_to_name_array[i] = add_fs[i];
				}
			}
			params.filter = this.getFilters();
			if(this.popup_return_method)
				request_data.passthru_data.ui_return_method = this.popup_return_method;
			if(this.popup_return_multiple)
				params.multiple = true;
			open_popup_window(params);
			// FIXME popup does not currently steal focus, and probably should
			this.handleBlur();
		}
	};


	var EmailRecipsInput = UI.EmailRecipsInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.focused = false;
		this.hovered = false;
		this.invalid = false;
		this.allow_custom = true;
		this.allow_clear = true;
		this.auto_update = true;
		this.module = 'Contacts';
		this.popup_layout = 'ForEmail';
		this.popup_return_method = 'popupReturn';
		this.extra_fields = ['email1','email2','name_email'];
		this.popup_return_multiple = true;
		if(params) YLang.augmentObject(this, params, true);
	}
	YLang.extend(EmailRecipsInput, RefInput, {
		initSearcher: function() {
			RefInput.prototype.initSearcher.call(this);
			this.searcher.quicksearch_method = 'email_quicksearch';
			this.searcher.disable_list_recent = 1;
			this.searcher.disable_show_detail = 1;
		},
		getSearchQuery: function() {
			var curval = this.field.value,
				start = get_default(this.field.selectionStart, 0),
				pre = curval.substring(0, start),
				post = curval.substring(start),
				m = pre.match(/\s*([^;]*)$/),
				pos = post.indexOf(';');
			if(m)
				pre = m[1];
			if(pos >= 0) post = post.substring(0, pos);
			return pre + post;
		},
		replaceActive: function(val) {
			if(! this.field) return;
			if(! val) val = '';
			var curval = this.field.value,
				start = get_default(this.field.selectionStart, 0),
				pre = curval.substring(0, start),
				post = curval.substring(start),
				pos = post.indexOf(';');
			pre = pre.replace(/[^;]*$/, '');
			if(pos >= 0) post = post.substring(pos + 1);
			pre = trim(pre);
			post = trim(post);
			if(post.length && val) val += '; ';
			else post += '; ';
			if(pre.length && val) pre += ' ';
			var newval = pre + val + post;
			this.field.value = newval;
			this.moveToEnd();
		},
		moveToEnd: function() {
			var len = this.field.value.length;
			this.field.blur();
			this.field.focus();
			this.field.setSelectionRange(len, len);
			this.field.scrollTop = 99999;
		},
		clear: function() {
			this.field.value = '';
		},
		popupReturn: function(val, count, all) {
			if(! count) return;
			var k, addr, ret = [];
			for(k in val) {
				addr = trim(val[k].name_email || val[k]._display);
				if(! addr.length) continue;
				ret.push(addr);
			}
			if(all) {
				if(this.field) this.field.value = ret.join('; ');
			} else
				this.replaceActive(ret.join('; '));
		},
		update: function(key, val, silent) {
			if(val) {
				var all;
				if(YLang.isString(val)) {
					val = {_display: val};
					all = true;
				}
				this.popupReturn({ID_0: val}, 1, all);
			}
			if(! silent)
				UI.callEvent(this, this.onchange, this.getValue());
			this.validate();
		},
		validate: function(evt) {
			this.invalid = false;
			if(this.required && this.isBlank()) {
				this.invalid = true;
				this.invalidMsg = 'required';
			}
			if(this.customValidate)
				this.customValidate();
			this.updateDisplay();
			return ! this.invalid;
		},
		getValue: function() {
			return this.field && this.field.value;
		}
	});


	var SearchSelect = UI.SearchSelect = function(id, params) {
		this.id = id || 'searchselect';
		this.module = null;
		this.multiple = false;
		this.searcher = null;
		this.popup = null;
		this.mode = null;
		this.recent_options = new SelectOptions({display_name: '_display'});
		this.search_options = new SelectOptions({display_name: '_display'});
		this.title = '';
		this.key = null;
		this.width = null;
		this.onchange = null;
		this.waiting_result = false; // need to assign ids to specific requests
		this.search_delay = 150;
		if(params) YLang.augmentObject(this, params, true);

		/* quickselect: 3 modes
			- show recent, list of records from that module
			- show filtered (prefix)
			- show details
			each mode will have a clear button at the bottom (if available - not for assigned user)
			it will have a select button if multiple records can be selected, or if viewing one record (checkboxes shown)
		   when user pauses on field, wait half a second
		   if field is empty, show popup with recent records from that module
		   if ID is given, show details for that record. (disable select button - already selected)
		*/
	}
	SearchSelect.prototype = {
		render: function() {
			var self = this;
			if(! this.popup) {
				this.popup = new PopupSlidePanel(this.id,
					{target: this.target, target_offset: this.target_offset, target_active_class: null});
				if(this.width)
					this.popup.setWidth(this.width);
				if(this.onmouseover)
					this.popup.onmouseover = this.onmouseover;
				if(this.onmouseout)
					this.popup.onmouseout = this.onmouseout;
				if(this.onmouseup)
					this.popup.onmouseup = this.onmouseup;
				this.popup.render();
				UI.clearChildNodes(this.popup.elt);
			}
			if(! this.title_elt) {
				this.title_elt = createElement2('div', {className: 'popup-title'});
				UI.setElementText(this.title_elt, this.title);
				this.popup.elt.appendChild(this.title_elt);
			}
			if(! this.list_elt) {
				this.list_elt = createElement2('div', {id: this.id + '-list', className: 'popup-select-multi'});
				this.popup.elt.appendChild(this.list_elt);
			}
			if(! this.detail_elt) {
				this.detail_elt = createElement2('div', {id: this.id + '-detail', className: 'popup-detail'});
				this.popup.elt.appendChild(this.detail_elt);
			}
			if(! this.list) {
				this.list = new SelectList(this.list_elt, {options: this.recent_options, no_scroll: true, popup: true, width: '100%'});
				this.list.setup();
				this.list.focused = true;
				this.list.render();
				this.list.onchange = function() { var k = this.getSelectedKey(); self.rowSelected(k, this.getValue(k)); };
			}
		},
		setTitle: function(t) {
			this.title = t;
			UI.setElementText(this.title_elt, t);
		},
		setMode: function(mode) {
			this.mode = mode;
		},
		setModule: function(module, silent) {
			this.module = module;
			if(! silent && this.popup && this.popup.visible) {
				if(this.mode == 'search')
					this.search(true);
				else if(this.mode == 'recent')
					this.showRecent();
				else if(this.mode == 'detail')
					this.search();
			}
		},
		setFilters: function(fs) {
			this.filters = fs;
		},
		setKey: function(k) {
			this.key = k;
		},
		setCustomValue: function(v) {
			this.custom_value = v;
		},
		showRecent: function() {
			if(this.disable_recent) {
				if(this.popup) this.popup.hide();
				return;
			}
			this.setTitle(this.recent_title || app_string('LBL_REF_RECENT_ENTRIES'));
			if(! this.popup.visible) {
				this.search_options.clear();
				this.list.setOptions(this.recent_options);
			}
			toggleDisplay(this.detail_elt, false);
			toggleDisplay(this.list_elt, true);
			var self = this,
				callback = function(data) {
					var result = data.getResult(),
						rows = [];
					if(! result.failed) {
						var l = result.formatted_rows;
						var pk = result.primary_key;
						for(var i = 0; i < l.length; i++) {
							rows.push([l[i][pk], l[i]]);
						}
					}
					self.setSearchResults(rows);
				},
				data = {module: this.module, fields: this.extra_fields},
				method = this.list_recent_method || 'list_recent',
				req = new SUGAR.conn.JSONRequest(method, {}, data);
			req.fetch(callback);
			this.waiting_result = req.request_id;
			this.popup.show();
		},
		showDetail: function() {
			if(this.disable_show_detail)
				return this.close();
			if(this.key) {
				var self = this,
					k = this.key,
					callb = function(body, caption, width, buttons) {
						self.setDetails(k, body, caption, width);
					};
				this.waiting_result = 'detail';
				SUGAR.util.getAdditionalDetails(this.module, this.key, callb);
			}
			else if(this.custom_value) {
				this.setTitle(app_string('LBL_REF_CUSTOM_ENTRY'));
				toggleDisplay(this.detail_elt, true);
				toggleDisplay(this.list_elt, false);
				this.detail_elt.innerHTML = html_escape(this.custom_value);
				this.popup.show();
			}
		},
		setDetails: function(key, body, caption, width) {
			if(this.key == key && this.waiting_result === 'detail') {
				this.setTitle(app_string('LBL_REF_DETAILS'));
				toggleDisplay(this.detail_elt, true);
				toggleDisplay(this.list_elt, false);
				this.detail_elt.innerHTML = body;
				this.popup.show();
				this.waiting_result = false;
			}
		},
		setSearchResults: function(rows, req_id) {
			if(! this.waiting_result || (isset(req_id) && req_id != this.waiting_result))
				return;
			this.waiting_result = false;
			var sel_idx = this.initSearchOptions(true);
			if(rows)
			for(var i = 0; i < rows.length; i++)
				this.search_options.addOption(''+rows[i][0], rows[i][1]);
			this.list.setOptions(this.search_options);
			this.list.setCurrentIndex(sel_idx);
			this.list.setSelectedKey(this.key, true);
			this.popup.reposition();
		},
		renameOptionValue: function(for_result) {
			if(this.allow_rename && this.query && this.key) {
				var lbl = trim(this.query);
				if(for_result) return lbl;
				lbl = app_string('LBL_REF_RENAME_ENTRY') + app_string('LBL_SEPARATOR') + lbl;
				return {_display: lbl, name: lbl};
			}
		},
		customOptionValue: function(for_result) {
			if(this.allow_custom && this.query) {
				var lbl = trim(this.query);
				if(! for_result) lbl = app_string('LBL_REF_CUSTOM_ENTRY') + app_string('LBL_SEPARATOR') + lbl;
				return {_display: lbl, name: lbl};
			}
		},
		initSearchOptions: function(clear) {
			var rename = this.renameOptionValue(),
				cust = this.customOptionValue();
			if(clear) {
				this.search_options.clear();
				if(rename) this.search_options.addOption('_rename', rename);
				if(cust) this.search_options.addOption('_custom', cust);
			}
			return (rename || cust) ? 0 : null;
		},
		search: function(clear_results) {
			if(! isset(this.query) || this.query === '')
				if(this.disable_list_recent || this.filters)
					return this.close();
				else
					return this.showRecent();
			this.setTitle(this.search_title || app_string('LBL_REF_SEARCH_RESULTS'));
			this.cancelRunSearch();
			var sel_idx = this.initSearchOptions(clear_results);
			this.list.setOptions(this.search_options);
			if(clear_results) {
				this.list.setSelectedKey(this.key, true);
				this.list.setCurrentIndex(sel_idx);
			}
			toggleDisplay(this.detail_elt, false);
			toggleDisplay(this.list_elt, true);
			this.runSearchDelayed(this.search_delay);
			this.popup.show();
		},
		cancelRunSearch: function() {
			if(this.searchTimeout) {
				clearTimeout(this.searchTimeout);
				this.searchTimeout = null;
			}
			if(this.waiting_result) {
				SUGAR.conn.abortRequest(this.waiting_result);
				this.waiting_result = null;
			}
		},
		runSearchDelayed: function(delay) {
			if(delay) {
				var self = this;
				this.searchTimeout = setTimeout(function() { self.runSearch(); }, delay);
			} else
				this.runSearch();
		},
		runSearch: function() {
			this.searchTimeout = null;
			if(! trim(this.query).length) return;
			var self = this,
				callback = function(data) {
					var result = data.getResult();
					var rows = [];
					if(! result.failed) {
						var l = result.formatted_rows;
						var pk = result.primary_key;
						for(var i = 0; i < l.length; i++) {
							rows.push([l[i][pk], l[i]]);
						}
					}
					self.setSearchResults(rows, data.request_id);
				},
				data = {
					module: this.module,
					filter_text: this.query,
					fields: this.extra_fields
				},
				method = this.quicksearch_method || 'quicksearch',
				req = new SUGAR.conn.JSONRequest(method, {}, data);
			if(this.filters)
				req.setArgs(this.filters);
			req.fetch(callback);
			this.waiting_result = req.request_id;
		},
		setQuery: function(prefix) {
			if(prefix !== this.query) {
				this.query = prefix;
				this.search(true);
			}
		},
		close: function() {
			this.waiting_result = false;
			if(this.popup) {
				this.popup.close();
				if(this.popup.destroy_on_close) {
					this.popup = null;
					this.title_elt = this.list_elt = this.detail_elt = this.list = null;
				}
			}
			if(this.detail_elt)
				this.detail_elt.innerHTML = ''; // get rid of form object
			this.query = null;
		},
		setWidth: function(w) {
			this.width = w;
			if(this.popup)
				this.popup.setWidth(w);
		},
		adjustCurrentIndex: function(nav) {
			if(this.list)
				this.list.adjustCurrentIndex(nav);
		},
		acceptCurrent: function() {
			if(this.list)
				return this.list.selectCurrent();
		},
		rowSelected: function(k, v, silent) {
			if(k === '_custom') {
				k = '';
				v = this.customOptionValue(true);
			}
			else if(k == '_rename') {
				k = this.key;
				if(! silent)
					UI.callEvent(this, this.onrename, this.renameOptionValue(true));
				silent = true;
			}
			this.setKey(k);
			this.close();
			if(! silent)
				UI.callEvent(this, this.onchange, k, v);
		},
		isHovered: function() {
			return (this.popup && this.popup.hovered);
		}
	};


	var SearchInput = UI.SearchInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.focused = false;
		if(params) YLang.augmentObject(this, params, true);
	}
	SearchInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt)
				this.elt = $(this.id);
			if(! this.field) {
				if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
			}
			if(! this.elt)
				return;
			if(! this.clearButton) {
				var links = this.elt.getElementsByTagName('a');
				if(links)
					this.clearButton = links[0];
			}
			if(! this.tabIndex && this.field && this.field.tabIndex > 0)
				this.tabIndex = this.field.tabIndex;
			this.addHooks();
			this.showHideClear();
			this.set_up = true;
		},
		addHooks: function() {
			var input = this;
			this.elt.onmousedown = function(evt) { input.mouseDown(evt || window.event); }
			this.elt.onclick = function(evt) { input.mouseClick(evt || window.event); }
			var blur = function(evt) { input.handleBlur(evt || window.event); };
			if(this.field) {
				this.field.onfocus = function(evt) { input.handleFocus(evt || window.event); }
				this.field.onblur = blur;
				this.field.onmousedown = function(evt) { input.fieldMouseDown(evt || window.event); }
				this.field.onkeydown = function(evt) { input.fieldKeyDown(evt || window.event); }
				this.field.onkeyup = function(evt) { input.fieldKeyUp(evt || window.event); }
				this.field.onchange = function(evt) { input.handleChanged(evt || window.event); }
			}
			if(this.clearButton) {
				this.clearButton.onfocus = function(evt) { input.handleFocus(evt || window.event, true); }
				this.clearButton.onblur = blur;
				this.clearButton.onmousedown = function(evt) { input.fieldMouseDown(evt || window.event); }
				this.clearButton.onclick = function(evt) { input.clearInput(evt); }
				this.clearButton.tabIndex = this.tabIndex;
			}
		},
		fieldMouseDown: function(evt) {
			YEvent.stopPropagation(evt);
			UI.callEvent(this, this.onmousedown, evt);
		},
		fieldKeyDown: function(evt) {
			if(evt.keyCode == 38) nav = -1;
			else if(evt.keyCode == 40) nav = 1;
			else nav = 0;
			if(nav) {
				if(this.searcher)
					this.searcher.adjustCurrentIndex(nav);
				else
					this.showSearch();
				YEvent.stopEvent(evt);
			} else if(evt.keyCode == 27) {
				if(this.searcher)
					this.hideSearch(true);
				this.clearInput();
			} else if(evt.keyCode == 13) {
				if(this.searcher && this.searcher.acceptCurrent())
					this.hideSearch();
				else
					this.handleManualSubmit();
				YEvent.stopEvent(evt);
			} else {
				var input = this;
				setTimeout(function() { input.showHideClear(); }, 50);
			}
		},
		fieldKeyUp: function(evt) {
			if(evt.keyCode && evt.keyCode != 27 && evt.keyCode != 13 && evt.keyCode != 9 && evt.keyCode != 16)
				this.updateSearch();
		},
		mouseDown: function(evt) {
			this.focus();
			YEvent.stopEvent(evt);
			UI.callEvent(this, this.onmousedown, evt);
		},
		mouseClick: function(evt) {
			UI.callEvent(this, this.onclick, evt);
		},
		focus: function() {
			if(this.field)
				this.field.focus();
		},
		handleFocus: function(evt, clear_focused) {
			this.focused = clear_focused ? 'clear' : true;
			if(this.field && ! clear_focused && ! this.did_clear)
				this.focus_value = this.field.value;
			YDom.addClass(this.elt, 'active');
			UI.callEvent(this, this.onfocus, evt);
		},
		handleBlur: function(evt) {
			var oldfocus = this.focused;
			this.focused = false;
			YDom.removeClass(this.elt, 'active');
			UI.callEvent(this, this.onblur, evt);
			if(oldfocus != 'clear' && this.did_clear && this.getValue() === '') {
				this.checkSubmit()
				this.did_clear = false;
			}
		},
		clearInput: function(evt) {
			if(! isset(this.focus_value))
				this.focus_value = this.field.value;
			this.field.value = '';
			if(this.focused) this.did_clear = true;
			this.showHideClear();
			UI.callEvent(this, this.onchange, evt);
			if(! this.focused)
				this.checkSubmit();
		},
		showHideClear: function() {
			if(this.field && this.clearButton) {
				this.clearButton.style.display = this.field.value.length ? 'block' : 'none';
				if(this.focused == 'clear')
					this.focus();
			}
		},
		handleManualSubmit: function() {
			this.field.value = trim(this.field.value);
			this.showHideClear();
			this.checkSubmit(true);
			this.focus_value = this.field.value;
		},
		handleChanged: function(evt) {
			if(this.redirecting) return;
			this.field.value = trim(this.field.value);
			this.showHideClear();
			UI.callEvent(this, this.onchange, evt);
			if(this.form) {
				var input = this;
				setTimeout(function() { input.checkSubmit(); }, 300);
			}
		},
		checkSubmit: function(force) {
			if(this.redirecting) return;
			if(force || (this.auto_submit && this.field && this.focus_value !== this.field.value)) {
				UI.submitForm(this.form);
				return true;
			}
		},
		getValue: function() {
			return this.field ? this.field.value : null;
		},
		setValue: function(value) {
			this.field.value = value;
		},
		getModule: function() {
			if(this.module) return this.module;
			if(this.form && this.form.module) return this.form.module.value;
		},
		getListId: function() {
			if(this.form && this.form.list_id) return this.form.list_id.value;
		},
		updateSearch: function() {
			this.showSearch();
		},
		cancelShowSearch: function() {
			if(this.searchTimeout) {
				clearTimeout(this.searchTimeout);
				this.searchTimeout = null;
				return true;
			}
		},
		cancelHideSearch: function() {
			if(this.hideSearchTimeout) {
				clearTimeout(this.hideSearchTimeout);
				this.hideSearchTimeout = null;
				return true;
			}
		},
		showSearchDelayed: function(delay) {
			this.cancelHideSearch();
			var input = this;
			this.searchTimeout = setTimeout(function() { input.showSearch(); }, delay || 1000);
		},
		initSearcher: function() {
			var mod = this.getModule(), list_id = this.getListId(), self = this;
			if(! this.quick_view || ! mod || ! list_id) return false;
			this.searcher = new SearchSelect(this.id + '-select',
				{module: mod, target: this.elt, target_offset: {top: -1, left: 10},
				 disable_recent: true, search_title: app_string('LBL_SEARCH_QUICK_VIEW')});
			this.searcher.onchange = function(k, v) {
				if(isset(self.focus_value)) self.setValue(self.focus_value);
				self.redirecting = true;
				sListView.showDetail(list_id, {module: mod, action: 'DetailView', record: k});
			}
			this.searcher.onmouseup = function(evt) {
				self.searchMouseUp(evt);
			}
			return true;
		},
		searchMouseUp: function(evt) {
			if(this.focused === 'search')
				this.field.focus();
		},
		showSearch: function() {
			this.cancelShowSearch();
			this.cancelHideSearch();
			if(! this.searcher)
				if(! this.initSearcher())
					return;
			this.searcher.render();
			var w = UI.getEltRegion(this.elt);
			if(w)
				this.searcher.setWidth(Math.max(w.width - 14, 200) + 'px');
			if(! this.disabled)
				this.searcher.setQuery(this.getValue());
		},
		hideSearchDelayed: function(delay) {
			this.cancelShowSearch();
			this.cancelHideSearch();
			var input = this;
			this.hideSearchTimeout = setTimeout(function() { input.hideSearch(); }, delay || 100);
		},
		hideSearch: function(refocus) {
			this.cancelShowSearch();
			this.cancelHideSearch();
			if(this.searcher) {
				this.searcher.close();
			}
			if(this.focused && this.field && refocus) {
				this.field.focus();
				this.field.select();
			}
		}
	};


	var CheckInput = UI.CheckInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.onchange = null;
		this.focused = false;
		if(params) YLang.augmentObject(this, params, true);
	};
	CheckInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt && this.id) {
				this.elt = $(this.id);
			}
			if(! this.field) {
				if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
			}
			this.addHooks();
			this.updateDisplay();
			this.set_up = true;
		},
		addHooks: function() {
			if(this.elt) {
				//YEvent.addListener(this.elt, 'click', this.handleClick, this, true);
				var ed = this;
				this.elt.onclick = function(evt) { return ed.handleClick(evt || window.event); };
			}
		},
		render: function() {
			if(! this.field) {
				this.field = createElement2('input', {type: 'hidden', name: this.name, value: this.init_value ? (this.submit_value || 1) : 0, id: this.field_id});
			}
			if(! this.elt) {
				var chk = this.getValue() ? ' checked' : '';
				this.elt = createElement2('button', {type: 'button', className: 'input-checkbox input-outer'+chk, id: this.id},
					createElement2('div', {className: 'input-icon'}));
				if (this.disabled)
					this.elt.disabled = true;
			}
			return this.elt;
		},
		focus: function() {
			if(this.elt) this.elt.focus();
		},
		getValue: function() {
			if(this.field) {
				if(isset(this.submit_value) && this.field.value === this.submit_value)
					return 1;
				return (this.field.value === '1' || this.field.value === 'true') ? 1 : 0;
			}
			return 0;
		},
		setValue: function(v) {
			if(this.field) this.field.value = v ? (this.submit_value || 1) : 0;
			this.updateDisplay();
		},
		toggle: function() {
			this.setValue(! this.getValue());
		},
		handleClick: function(evt) {
			var val;
			if(this.field)
				this.field.value = val = this.getValue() ? 0 : (this.submit_value || 1);
			UI.callEvent(this, this.onchange, evt, val);
			this.updateDisplay();
			if(this.auto_submit)
				UI.submitForm(this.form);
		},
		updateDisplay: function() {
			if(this.elt)
				UI.addRemoveClass(this.elt, 'checked', this.getValue());
		},
		setDisabled: function(disabled) {
			if(! isset(disabled)) disabled = 1;
			this.disabled = !! disabled;
			if(this.elt) this.elt.disabled = disabled;
		}
	};


	var TextInput = UI.TextInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.onchange = null;
		this.focused = false;
		this.invalid = false;
		this.allow_blank = true;
		if(params) YLang.augmentObject(this, params, true);
	};
	TextInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.field) {
				if(this.elt)
					this.field = this.elt;
				else if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
				else if(this.id)
					this.field = $(this.id);
			}
			if(! this.elt)
				this.elt = this.field;
			this.addHooks();
			this.updateDisplay();
			this.set_up = true;
		},
		addHooks: function() {
			if(this.field) {
				var input = this;
				this.field.onfocus = function(evt) { return input.handleFocus(evt || window.event); }
				this.field.onblur = function(evt) { return input.handleBlur(evt || window.event); }
				this.field.onchange = function(evt) { return input.handleChanged(evt || window.event); }
				if('oninput' in this.field)
					this.field.oninput = function(evt) { return input.handleInput(evt || window.event); }
				else // IE
					this.field.onpropertychange = function() { return input.handleInputCompat(window.event); }
				this.field.onkeydown = function(evt) { return input.handleKeyDown(evt || window.event); }
			}
		},
		handleFocus: function(evt) {
			this.focused = true;
			UI.callEvent(this, this.onfocus, evt);
		},
		handleBlur: function(evt) {
			this.focused = false;
			UI.callEvent(this, this.onblur, evt);
		},
		getDecimals: function() {
			var d;
			if(this.format == 'int') {
				d = 0;
			} else if(this.format == 'currency') {
				d = get_default(this.decimals, 2);
			} else {
				d = get_default(this.decimals, 0);
			}
			return d;
		},
		getNumberFormat: function() {
			var ret;
			if(this.numFormat)
				ret = this.numFormat;
			else if(this.format == 'int' || this.format == 'float' || this.format == 'currency') {
				ret = {blankAllowed: this.allow_blank, minimumDecimals: this.min_decimals, decimalPlaces: this.getDecimals(), defaultNumValue: this.default_num_value, noFormat: this.no_format};
				if(this.format == 'currency' && ! isset(ret.minimumDecimals))
					ret.minimumDecimals = ret.decimalPlaces;
			}
			return ret;
		},
		handleChanged: function(evt, silent) {
			var numf = this.getNumberFormat();
			if(numf) {
				var num = validateNumberInput(this.field, numf), upd;
				if(isset(this.min) && ('' + this.min != '') && num < this.min) { num = this.min; upd = 1; }
				else if(isset(this.max) && ('' + this.max != '') && num > this.max) { num = this.max; upd = 1; }
				if(upd)
					this.field.value = this.no_format ? num : stdFormatNumber(num);
				this.numVal = num;
			}
			else if(this.format == 'phone') {
				if(! this.no_format) formatPhoneNumber(this.field);
			}
			if(! silent)
				UI.callEvent(this, this.onchange, evt, this.getValue());
			this.validate();
		},
		handleInputCompat: function(evt) {
			if(evt.propertyName == 'value')
				this.handleInput(evt);
		},
		handleInput: function(evt) {
			UI.callEvent(this, this.oninput, evt);
		},
		handleKeyDown: function(evt) {
			if(evt.keyCode == 13) {
				this.handleChanged(evt);
				if(! this.invalid)
					return UI.callEvent(this, this.onreturn, evt);
			}
			return UI.callEvent(this, this.onkeydown, evt);
		},
		validate: function(evt) {
			this.invalid = false;
			if(this.required && this.isBlank()) {
				this.invalid = true;
				this.invalidMsg = 'required';
			}
			if(this.customValidate)
				this.customValidate();
			this.updateDisplay();
			return ! this.invalid;
		},
		formatValue: function(input) {
			var numf = this.getNumberFormat(), num;
			if(numf) {
				num = validateNumber(input, numf);
				input = this.no_format ? num : stdFormatNumber(num);
			}
			return input;
		},
		render: function() {
			if(! this.field) {
				var init_val = this.init_value;
				if(typeof(init_val) == 'number')
					init_val = this.formatValue(init_val);
				var attrs = {type: 'text', className: (this.className || 'input-text') + ' input-outer', id: this.field_id || this.id, name: this.name, value: init_val};
				var seta = ['size', 'style', 'readOnly', 'disabled', 'placeholder', 'tabIndex'];
				for(var i = 0; i < seta.length; i++)
					if(isset(this[seta[i]])) attrs[seta[i]] = this[seta[i]];
				this.field = createElement2('input', attrs);
				this.addHooks();
				this.updateDisplay();
			}
			return this.field;
		},
		focus: function() {
			if(this.field) this.field.focus();
		},
		select: function() {
			if(this.field) {
				this.field.focus();
				this.field.select();
			}
		},
		getValue: function(nativeVal) {
			var ret = this.field ? this.field.value : '';
			if(nativeVal) {
				if(ret === '') return 0;
				if(this.format == 'int')
					ret = parseInt(stdUnformatNumber(ret), 10);
				else if(this.format == 'float' || this.format == 'currency')
					ret = parseFloat(stdUnformatNumber(ret));
			}
			return ret;
		},
		isBlank: function() {
			return ! trim(this.getValue()).length;
		},
		setValue: function(val, silent) {
			if(typeof(val) == 'number')
				val = this.formatValue(val);
			if(this.field) this.field.value = val;
			this.validate();
			if(! silent)
				UI.callEvent(this, this.onchange, null, val);
		},
		updateDisplay: function() {
			if(this.field) {
				UI.addRemoveClass(this.field, 'invalid', this.invalid);
			}
		},
		setSize: function(size) {
			this.size = size;
			if(this.field) this.field.size = size;
		},
		setDisabled: function(disabled) {
			if(! isset(disabled)) disabled = 1;
			this.disabled = !! disabled;
			if(this.field) this.field.disabled = this.disabled;
		},
		destroy: function() {
			YEvent.purgeElement(this.elt);
			UI.domRemoveElt(this.elt);
			this.elt = null;
		}
	};


	var TextAreaInput = UI.TextAreaInput = function(id, params) {
		TextInput.call(this, id, params);
	};
	YLang.extend(TextAreaInput, TextInput, {
		handleKeyDown: function(evt) {
			if(evt.keyCode == 13 && evt.shiftKey) {
				this.handleChanged(evt);
				if(! this.invalid)
					return UI.callEvent(this, this.onreturn, evt);
			}
			return UI.callEvent(this, this.onkeydown, evt);
		},
		render: function() {
			if(! this.field) {
				var attrs = {className: (this.className || 'input-textarea') + ' input-outer', id: this.field_id || this.id, name: this.name, value: this.init_value, rows: 4, cols: 60};
				var seta = ['rows', 'cols', 'style', 'readOnly', 'disabled', 'placeholder', 'tabIndex'];
				for(var i = 0; i < seta.length; i++)
					if(isset(this[seta[i]])) attrs[seta[i]] = this[seta[i]];
				this.field = createElement2('textarea', attrs);
				this.addHooks();
				this.updateDisplay();
			}
			return this.field;
		},
		setDisabled: function(disabled) {
			if(! isset(disabled)) disabled = 1;
			this.disabled = !! disabled;
			if(this.field) this.field.disabled = this.disabled;
		}
	});


	var QuickText = UI.QuickText = function(params) {
		this.id = 'quicktxt-'+(++ QuickText.uniq_idx);
		if(params) YLang.augmentObject(this, params, true);
	}
	QuickText.uniq_idx = 0;
	QuickText.prototype = {
		init: function(value, onchange, oncancel, validate) {
			this.value = value;
			this.onchange = onchange;
			this.oncancel = oncancel;
			if(validate)
				this.customValidate = validate;
			this.set_up = false;
			this.addHooks();
		},
		initSource: function(source, value, onchange, oncancel, validate) {
			this.elt = source;
			this.init(value, onchange, oncancel, validate);
		},
		setup: function() {
			this.addHooks();
		},
		addHooks: function() {
			if(this.elt) {
				YEvent.addListener(this.elt, 'mousedown', function(evt) { YEvent.stopPropagation(evt); }, this, true);
				YEvent.addListener(this.elt, 'click', this.handleClick, this, true);
			}
		},
		handleClick: function(evt) {
			this.showPopup();
		},
		getTargetOffset: function() {
			return null;
		},
		getContentElement: function() {
			if(! this.content_elt)
				this.content_elt = createElement2('div', {className: 'quick-input-content'});
			return this.content_elt;
		},
		showPopup: function(timeout, target, offset) {
			var input = this,
				content = this.getContentElement(),
				p = new PopupSlidePanel(this.id,
					{target: target || this.elt, target_offset: offset || this.getTargetOffset(),
					 destroy_on_close: true, content_elt: content});
			p.onclose = function() {
				input.handleClosePopup();
			}
			p.onshow = function() {
				input.field.select();
			}
			p.render();
			if(! this.field) {
				if(this.multiline)
					this.field = new TextAreaInput(this.field_id || this.id+'-input');
				else
					this.field = new TextInput(this.field_id || this.id+'-input', {format: this.format, decimals: this.decimals});
			}
			if(! this.multiline)
				this.field.setSize(this.size || 16);
			var body = [this.field.render()];
			var buttons = [];
			if(this.multiline || this.show_update) {
				if(! this.update_button)
					this.update_button = new UI.ButtonInput(
						this.update_id || this.id+'-update',
						{icon: 'icon-accept', label: app_string('LBL_UPDATE'),
						 onclick: function(evt) { input.handleReturn(evt); } });
				buttons.push(this.update_button.render());
			}
			if(this.show_reset) {
				if(! this.reset_button)
					this.reset_button = new UI.ButtonInput(
						this.reset_id || this.id+'-reset',
						{icon: 'icon-cancel', label: app_string('LBL_RESET_BUTTON_LABEL'),
						 onclick: function(evt) { input.handleReset(evt); } });
				buttons.push(this.reset_button.render());
			}
			if(buttons.length)
				body.push(createElement2('div', {style: 'margin-top: 0.3em'}, buttons));
			UI.setElementContent(content, body);
			this.field.customValidate = this.customValidate;
			this.field.onreturn = function(evt) { input.handleReturn(evt); }
			this.field.setValue(this.value);
			this.field.validate();

			this.popup = p;
			p.show(timeout);
			this.selecting = true;
		},
		handleReturn: function(evt) {
			if(evt) YEvent.stopEvent(evt);
			if(this.selecting) {
				this.selecting = false;
				this.value = this.field.getValue();
				this.popup.close();
				UI.callEvent(this, this.onchange);
			}
		},
		handleReset: function(evt) {
			if(this.selecting) {
				this.selecting = false;
				this.value = null;
				this.popup.close();
				UI.callEvent(this, this.onreset);
			}
		},
		handleClosePopup: function() {
			this.popup = null;
			if(this.selecting) {
				this.selecting = false;
				UI.callEvent(this, this.oncancel);
			}
		},
		getValue: function() {
			return this.value;
		},
		validate: function() {
			return true;
		},
		destroy: function() {
			YEvent.purgeElement(this.elt);
		}
	};


	var HtmlInput = UI.HtmlInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.onchange = null;
		this.focused = false;
		if(params) YLang.augmentObject(this, params, true);
	}
	HtmlInput.prototype = {
		setup: function() {
			if(this.set_up) return;
			if(! this.elt)
				this.elt = $(this.id);
			if(! this.field && this.form && this.name)
				this.field = this.form.elements[this.name];
			var self = this;
			SUGAR.ui.onInitForm(this.form, function() { self.register(); });
			this.set_up = true;
		},
		handleFocus: function(evt, ed) {
			if(! this.focused) {
				this.focused = true;
				UI.callEvent(this, this.focus, evt, ed);
			}
		},
		handleBlur: function(evt, ed) {
			if(this.focused) {
				this.focused = false;
				UI.callEvent(this, this.blur, evt, ed);
			}
		},
		instanceReady: function(evt, ed) {
			this.ready = true;
			if(this.autofocus) this.focus();
		},
		focus: function() {
			if(! this.ready) this.autofocus = 1;
			else {
				var ed = this.getEditor(); if(ed) ed.focus();
			}
		},
		getEditor: function() {
			if(this.instance) return this.instance;
			if(this.name) return CKEDITOR.instances[this.name];
		},
		insertHtml: function(html) {
			var ed = this.getEditor();
			if(ed) ed.insertHtml(html);
		},
		getValue: function() {
			var ed = this.getEditor();
			if(ed) return ed.getData();
		},
		setValue: function(val) {
			var ed = this.getEditor();
			if(ed) ed.setData(val);
		},
		beforeSubmitForm: function() {
			var ed = this.getEditor();
			if(ed) ed.updateElement();
		},
		register: function() {
			if(! this.instance && this.field) {
				CKEDITOR.remove(this.field.name);
				var cfg = this.ck_config ? deep_clone(this.ck_config) : {};
				if(window.CKEDITOR_CONFIG)
					cfg.customConfig = window.CKEDITOR_CONFIG;
				this.instance = CKEDITOR.replace(this.field, cfg);
				if(this.instance) {
					var self = this;
					this.instance.on('focus', function(e) { self.handleFocus(e, e.editor); });
					this.instance.on('blur', function(e) { self.handleBlur(e, e.editor); });
					this.instance.on('instanceReady', function(e) { self.instanceReady(e, e.editor); });
				}
			}
		},
		render: function() {
			if(! this.field && this.name) {
				this.field = createElement2('textarea', {name: this.name, value: this.init_value});
			}
			if(! this.elt) {
				this.elt = createElement2('div', {id: this.id}, this.field);
			}
			return this.elt;
		},
		destroy: function() {
			var inst = this.getEditor();
			if(inst) CKEDITOR.remove(inst);
		}
	}


	var DateInput = UI.DateInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.onchange = null;
		this.focused = false;
		this.invalid = false;
		if(params) YLang.augmentObject(this, params, true);
	};
	DateInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt)
				this.elt = $(this.id);
			if(! this.field) {
				if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
			}
			if(! this.button && this.field) {
				this.button = $(this.field.id+'-sel');
			}
			if(! this.elt)
				return;
            CalendarInput.initLanguage();
            this.loadValue();
			this.addHooks();
			this.updateDisplay();
			this.set_up = true;
		},
		addHooks: function() {
			var input = this;
			if(this.field) {
				this.field.onfocus = function(evt) { return input.handleFocus(evt || window.event); }
				this.field.onblur = function(evt) { return input.handleBlur(evt || window.event); }
				this.field.onkeydown = function(evt) { input.fieldKeyDown(evt || window.event); }
				this.field.onchange = function(evt) { return input.handleChanged(evt || window.event); }
			}
			if(this.button && this.field) {
				this.button.onfocus = this.field.onfocus;
				this.button.onblur = this.field.onblur;
				this.button.onclick = function(evt) { return input.showCalendar(); };
			}
		},
		showCalendar: function() {
            this.cal_input = new UI.CalendarInput(this.id+'-calendar', {input_field: this, set_value_method: 'returnDate'});
			this.cal_input.setup();
			this.cal_input.showPopup();
			return false;
		},
		hideCalendar: function() {
			if(this.cal_input) this.cal_input.hide();
		},
		calendarClosed: function() {
            this.cal_input = null;
		},
		fieldKeyDown: function(evt) {
			if(evt.keyCode == 27) {
				this.clear();
				YEvent.stopEvent(evt);
			}
		},
		handleFocus: function(evt) {
			this.focused = true;
			UI.callEvent(this, this.onfocus, evt);
			this.updateDisplay();
		},
		handleBlur: function(evt) {
			this.focused = false;
			UI.callEvent(this, this.onblur, evt);
			this.updateDisplay();
		},
		handleChanged: function(evt, silent) {
			if(this.field) {
				var n = validateDateInput(this.field);
				if(! n) {
					this.field.value = '';
					this.dateVal = null;
				} else
					this.dateVal = n.d;
			}
			if(! silent)
				UI.callEvent(this, this.onchange, evt, this.getValue());
			this.validate();
		},
		returnDate: function(d) {
			this.field.value = d;
			this.loadValue();
			UI.callEvent(this, this.onchange, null, this.getValue());
			this.validate();
		},
		clear: function() {
			if (this.field) this.field.value = '';
			this.validate();
		},
		isBlank: function() {
			return ! trim(this.getValue()).length;
		},
		validate: function(evt) {
			this.invalid = false;
			if(this.required && this.isBlank()) {
				this.invalid = true;
				this.invalidMsg = 'required';
			}
			if(this.customValidate)
				this.customValidate();
			this.updateDisplay();
			return ! this.invalid;
		},
		focus: function() {
			if(this.field) this.field.focus();
		},
		loadValue: function() {
			if(this.field) {
				var n = parseDateString(this.field.value);
				this.dateVal = n ? n.d : null;
			}
		},
		getValue: function(asNative) {
			if(asNative) return this.dateVal;
			return this.field ? this.field.value : '';
		},
		setValue: function(date, silent) {
			if(this.field) {
				if(date instanceof Date) date = date.print(getDateFormat().print_format);
				this.field.value = date;
			}
			this.handleChanged(null, silent);
		},
		updateDisplay: function() {
			UI.addRemoveClass(this.elt, 'active', this.focused);
			UI.addRemoveClass(this.field, 'invalid', this.invalid);
		},
		setDisabled: function(disabled) {
			if(! isset(disabled)) disabled = 1;
			this.disabled = !! disabled;
			if(this.field) this.field.disabled = this.disabled;
			if(this.button) this.button.disabled = this.disabled;
			UI.addRemoveClass(this.elt, 'disabled', this.disabled);
			if(this.disabled) this.hideCalendar();
		},
		render: function() {
			if(! this.elt) {
				this.elt = createElement2('div', {className: 'input-complex input-outer', id: this.id});
				if(this.style) setAttr(this.elt, 'style', this.style);
				var inner = createElement2('div', {className: 'input-part sep-right'},
					this.field=createElement2('input', {type: 'text', className: 'input-text input-entry',
						name: this.name, id: this.field_id, size: 10, value: this.init_value}), this.elt);
				this.button = createElement2('button', {className: 'input-button compact', title: app_string('LNK_SELECT_DATE')},
					createElement2('div', {className: 'input-icon icon-calendar'}), this.elt);
				this.setDisabled(this.disabled || 0);
				this.setup();
			}
			return this.elt;
		}
	};


	var DateTimeInput = UI.DateTimeInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.onchange = null;
		this.focused = false;
		this.invalid = false;
		this.date_invalid = false;
		this.time_invalid = false;
		if(params) YLang.augmentObject(this, params, true);
		if(this.id) {
			if(! this.date_id) this.date_id = this.id.replace(/-input$/, '-date');
			if(! this.time_id) this.time_id = this.id.replace(/-input$/, '-time');
		}
	};
	DateTimeInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt)
				this.elt = $(this.id);
			if(! this.field) {
				if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
			}
			if (! this.date_field) {
				this.date_field = $(this.date_id);
			}
			if (! this.date_button) {
				this.date_button = $(this.date_id + '-sel');
			}
			if (! this.time_field) {
				this.time_field = $(this.time_id);
			}
			if(! this.elt)
				return;
            CalendarInput.initLanguage();
            this.setValue(this.getValue(), true);
			this.addHooks();
			this.updateDisplay();
			this.set_up = true;
		},
		addHooks: function() {
			var input = this;
			var focus = function(evt) { return input.handleFocus(evt || window.event); }
			var blur = function(evt) { return input.handleBlur(evt || window.event); }
			var keydown = function(evt) { input.fieldKeyDown(evt || window.event); }
			if(this.date_field) {
				this.date_field.onfocus = focus;
				this.date_field.onblur = blur;
				this.date_field.onkeydown = keydown;
				this.date_field.onchange = function(evt) { return input.handleChangedDate(evt || window.event); };
			}
			if(this.date_button) {
				this.date_button.onfocus = focus;
				this.date_button.onblur = blur;
				this.date_button.onclick = function(evt) { return input.showCalendar(); };
			}
			if(this.time_field) {
				this.time_field.onfocus = focus;
				this.time_field.onblur = blur;
				this.time_field.onkeydown = keydown;
				this.time_field.onchange = function(evt) { return input.handleChangedTime(evt || window.event); };
			}
		},
		showCalendar: function() {
            this.cal_input = new UI.CalendarInput(this.id+'-calendar', {input_field: this, get_value_method: 'getDateValue', set_value_method: 'setDateValue'});
			this.cal_input.setup();
			this.cal_input.showPopup();
			return false;
		},
		hideCalendar: function() {
			if(this.cal_input) this.cal_input.hide();
		},
		calendarClosed: function() {
            this.cal_input = null;
		},
		fieldKeyDown: function(evt) {
			if(evt.keyCode == 27) {
				this.clear();
				YEvent.stopEvent(evt);
			}
		},
		handleFocus: function(evt) {
			this.focused = true;
			UI.callEvent(this, this.onfocus, evt);
			this.updateDisplay();
		},
		handleBlur: function(evt) {
			this.focused = false;
			UI.callEvent(this, this.onblur, evt);
			this.updateDisplay();
		},
		splitDateTime: function(val) {
			return val.match(/^\s*(.+)\s+(\d+:\d+(:\d+)?\s*([ap]m?)?|\d+\s*[ap]m?)$/i);
		},
		handleChangedDate: function(evt, silent) {
			if(this.date_field) {
				var m = this.splitDateTime(this.date_field.value);
				if(m)
					this.setValues(m[1], m[2], silent);
				else
					this.setValues(this.date_field.value, this.getTimeValue(), silent);
			}
			if(! silent && this.getDateValue().length && this.time_field && (! this.getTimeValue().length || this.time_invalid))
				this.time_field.focus();
		},
		handleChangedTime: function(evt, silent) {
			this.setValues(this.getDateValue(), this.getTimeValue(), silent);
		},
		clear: function(silent) {
			this.setValues('', '', silent);
		},
		validate: function(evt) {
			this.date_invalid = false;
			this.time_invalid = false;
			var have_date = trim(this.getDateValue()).length;
			var have_time = trim(this.getTimeValue()).length;
			if(! have_date && (this.required || have_time))
				this.date_invalid = true;
			if(! have_time && (this.required || have_date))
				this.time_invalid = true;
			this.invalid = this.date_invalid || this.time_invalid;
			this.invalidMsg = 'required';
			if(this.customValidate)
				this.customValidate();
			this.updateDisplay();
			return ! this.invalid;
		},
		focus: function() {
			if(this.time_field && this.time_invalid && ! this.date_invalid)
				this.time_field.focus();
			else if(this.date_field)
				this.date_field.focus();
		},
		getValue: function(asNative) {
			if(asNative) return this.dateVal;
			return this.field ? this.field.value : '';
		},
		getDateValue: function() {
			return this.date_field ? this.date_field.value : '';
		},
		getTimeValue: function() {
			return this.time_field ? this.time_field.value : '';
		},
		setDateValue: function(val, silent) {
			if(this.date_field) this.date_field.value = val;
			this.setValues(val, this.getTimeValue(), silent);
		},
		setTimeValue: function(val, silent) {
			if(this.time_field) this.time_field.value = val;
			this.setValues(this.getDateValue(), val, silent);
		},
		setValue: function(dt, silent) {
			var s;
			if(dt instanceof Date)
				this.setValues(dt.print(getDateFormat().print_format), dt.print(getTimeFormat().print_format), silent, dt);
			else if(YLang.isString(dt) && (s = this.splitDateTime(dt)))
				this.setValues(s[1], s[2], silent);
			else
				this.setValues('', '', silent);
		},
		setValues: function(date_val, time_val, silent, from_date, evt) {
			var dval, tval;
			if(from_date && date_val && time_val) {
				dval = {display: date_val};
				tval = {display: time_val};
			} else {
				dval = parseDateString(date_val),
				tval = parseTimeString(time_val);
			}
			if(this.date_field) this.date_field.value = dval ? dval.display : '';
			if(this.time_field) this.time_field.value = tval ? tval.display : '';
			if(dval && tval) {
				if(this.field) this.field.value = dval.display + ' ' + tval.display;
				if(from_date)
					this.dateVal = new Date(from_date);
				else {
					this.dateVal = new Date(dval.d);
					this.dateVal.setHours(tval.hour);
					this.dateVal.setMinutes(tval.minute);
					this.dateVal.setSeconds(0);
				}
			} else {
				if(this.field) this.field.value = '';
				this.dateVal = null;
			}
			if(! silent)
				UI.callEvent(this, this.onchange, evt, this.getDateValue(), this.getTimeValue());
			this.validate();
		},
		updateDisplay: function() {
			if(this.date_field)
				UI.addRemoveClass(this.date_field, 'invalid', this.date_invalid);
			if(this.time_field)
				UI.addRemoveClass(this.time_field, 'invalid', this.time_invalid);
			UI.addRemoveClass(this.elt, 'active', this.focused);
		},
		setDisabled: function(disabled) {
			if(! isset(disabled)) disabled = 1;
			this.disabled = !! disabled;
			if(this.date_field) this.date_field.disabled = this.disabled;
			if(this.time_field) this.time_field.disabled = this.disabled;
			if(this.date_button) this.date_button.disabled = this.disabled;
			UI.addRemoveClass(this.elt, 'disabled', this.disabled);
			if(this.disabled) this.hideCalendar();
		}
	};


	var CalendarInput = UI.CalendarInput = function(id, params) {
		CalendarInput.initLanguage();
		this.id = id;
		this.auto_close = true;
		this.auto_focus = true;
		if(! params) params = {};
		YLang.augmentObject(this, params, true);
	}
	CalendarInput.initLanguage = function(reload) {
		if(! this.lang_inited || reload) {
			Calendar._DN = app_list_strings('weekdays_long_dom');
			Calendar._SDN = app_list_strings('weekdays_dom');
			var mnsl = app_list_strings('months_long_dom');
			var mns = app_list_strings('months_dom');
			Calendar._MN = [];
			Calendar._SMN = []
			for(var i = 1; i <= 12; i++) {
				Calendar._MN.push(mnsl[i]);
				Calendar._SMN.push(mns[i]);
			}
			Calendar._TT = {
				SEL_DATE: app_string('LNK_SELECT_DATE'),
				PREV_YEAR: app_string('LBL_PREVIOUS_YEAR'),
				PREV_MONTH: app_string('LBL_PREVIOUS_MONTH'),
				TODAY: app_string('LBL_CALENDAR_TODAY'),
				GO_TODAY: app_string('LBL_CALENDAR_TODAY'),
				NEXT_MONTH: app_string('LBL_NEXT_MONTH'),
				NEXT_YEAR: app_string('LBL_NEXT_YEAR'),
				WK: app_string('LBL_WEEK_COL_HEADER'),
				DAY_FIRST: app_string('LBL_CHANGE_FIRST').replace('{NAME}', '%s'),
				PART_TODAY: app_string('LBL_TODAY_SUFFIX')
			}
		}
	}
	CalendarInput.prototype = {
		getCalendarOptions: function() {
			var opts = this.calendar_options ? deep_clone(this.calendar_options) : {};
			opts.getButtonLabel = this._getButtonLabel;
			if(this.date_format)
				opts.dateFormat = this.date_format;
			return opts;
		},
		setup: function() {
			if(this.set_up) return;
			if(! this.calendar)
				this.calendar = new Calendar(this.getCalendarOptions());
			if(this.attach_target) {
				var attach = $(this.attach_target), self = this;
				if(attach) attach.onclick = function() { self.showPopup(); return false; }
				if(! this.target) this.target = attach;
			}
			if(! this.input_field) {
				if(this.form && this.name) {
					this.input_field = UI.getFormInput(this.form, this.name);
					if(! this.input_field)
						this.input_field = this.form.elements[this.name];
				}
			}
			if(! this.target && this.input_field) {
				if(this.input_field.elt)
					this.target = this.input_field.elt;
				else if(isNode(this.input_field))
					this.target = this.input_field;
			}
			this.set_up = true;
		},
		getTargetOffset: function() {
			return this.target_offset || {top: -1};
		},
		getDisplayTransform: function() {
			return this.display_transform || 'scaleY(0.4)';
		},
		_getButtonLabel: function(name) {
			var icon = {'prev_month': 'prev', 'prev_year': 'dprev', 'next_month': 'next', 'next_year': 'dnext'};
			if(icon[name]) return UI.createIcon('icon-'+icon[name]);
		},
		getDateValue: function() {
			var inf = this.input_field, method = this.get_value_method || 'getValue';
			if(inf) {
				if(inf[method]) return inf[method]();
				return inf.value;
			}
		},
		initCalendar: function() {
			var self = this, val = this.getDateValue();
			if(isset(val))
				this.calendar.parseDate(val);
			this.calendar.onchange = function(cal, date, time) { self.returnDate(date, time); }
			if(! this.calendar.getElement())
				this.calendar.render();
			else
				this.calendar.clearHighlight();
		},
		returnDate: function(date, time) {
			if(this.auto_close)
				this.popup.close();
			var inf = this.input_field, method = this.set_value_method || 'setValue';
			if(inf) {
				if(inf[method]) inf[method](date);
				else inf.value = date;
				if(this.auto_focus && inf.focus)
					inf.focus();
			}
			UI.callEvent(this, this.onchange, date, time);
		},
		showPopup: function() {
			this.initCalendar();
			if(! this.popup) {
				var cal = this.calendar;
				this.popup = new PopupSlidePanel(this.id + 'popup',
					{content_elt: cal.getElement(), container: this.container,
						target: this.target || this.inputField, target_offset: this.getTargetOffset(),
						tabIndex: 1, destroy_on_close: true,
						customDisplayTransform: this.getDisplayTransform() });
				this.popup.keyDown = function(evt) {
					return cal.keyDown(evt);
				}
			}
			this.popup.render();
			this.popup.show();
		},
		hide: function() {
			if(this.popup) this.popup.hide();
		}
	};


	var DurationInput = UI.DurationInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.time_id = this.id + '-time';
		this.onchange = null;
		this.focused = false;
		this.invalid = false;
		if(params) YLang.augmentObject(this, params, true);
	};
	DurationInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.field) {
				if(this.elt)
					this.field = this.elt;
				else if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
				else if(this.id)
					this.field = $(this.id);
			}
			if (! this.time_field) {
				this.time_field = $(this.time_id);
			}
			if(! this.all_day_field && this.all_day_name) {
				this.all_day_field = UI.getFormInput(this.form, this.all_day_name);
			}
			if(! this.elt)
				this.elt = this.field;
			this.addHooks();
			this.updateDisplay();
			this.set_up = true;
		},
		addHooks: function() {
			var input = this;
			if(this.time_field) {
				this.time_field.onfocus = function(evt) { return input.handleFocus(evt || window.event); }
				this.time_field.onblur = function(evt) { return input.handleBlur(evt || window.event); }
				this.time_field.onkeydown = function(evt) { input.fieldKeyDown(evt || window.event); }
				this.time_field.onchange = function(evt) { return input.handleChanged(evt || window.event); }
			}
			if(this.all_day_field) {
				this.all_day_field.onchange = function(evt, val) { return input.handleAllDay(evt, val); }
			}
		},
		fieldKeyDown: function(evt) {
			if(evt.keyCode == 27) {
				this.clear();
				YEvent.stopEvent(evt);
			}
		},
		handleFocus: function(evt) {
			if(! this.focused) {
				this.focused = true;
				UI.callEvent(this, this.onfocus, evt);
			}
		},
		handleBlur: function(evt) {
			if(this.focused) {
				this.focused = false;
				UI.callEvent(this, this.onblur, evt);
			}
		},
		handleAllDay: function(evt, val) {
			this.handleChanged();
			if(! val)
				this.focus();
		},
		handleChanged: function(evt) {
			if (this.field && this.time_field) {
				var all_day = this.getAllDay(), result;
				if(all_day)
					this.field.value = this.time_field.value = '';
				else {
					result = this.format();
					if (result) {
						this.field.value = result.total_minutes;
						this.time_field.value = result.hours + this.hours_abbrev +' '+ result.minutes + this.mins_abbrev;
					}
				}
			}
			UI.callEvent(this, this.onchange, evt);
			this.validate();
		},
		setValue: function(value, silent) {
			var hrs;
			value = Math.round(parseFloat(value));
			if(isNaN(value) || value < 0) value = 0;
			if(this.field) this.field.value = value;
			if(this.time_field) {
				hrs = Math.floor(value / 60);
				value -= hrs * 60;
				this.time_field.value = hrs + this.hours_abbrev + ' ' + value + this.mins_abbrev;
			}
			this.validate();
			if(! silent)
				UI.callEvent(this, this.onchange, evt);
		},
		clear: function() {
			if (this.field) this.field.value = '';
			if (this.time_field) this.time_field.value = '';
		},
		format: function() {
			var hr, min, temp, val = trim(this.getDisplayValue()),
				pos = -1,
				pat = new RegExp(
					'(.*?)\\s*(:|' + RegExp.escape(this.hours_abbrev) +
					'|' + RegExp.escape(this.mins_abbrev) + ')\\s*(.*)'),
				m = val.match(pat);

			if(m) {
				temp = parseFloat(stdUnformatNumber(m[1]));
				if(m[2] == ':' || m[2] == this.hours_abbrev) {
					hr = temp;
					min = parseFloat(stdUnformatNumber(m[3]));
				} else
					min = temp;
			} else {
				temp = parseFloat(stdUnformatNumber(val));
				if(! val.match(/^\d+$/) || (temp > 0 && temp < 10))
					hr = temp;
				else
					min = temp;
			}
			if(isNaN(hr) || hr < 0) hr = 0;
			if(isNaN(min) || min < 0) min = 0;
			else min = Math.round(min);
			var hr_floor = Math.floor(hr);
			min += Math.round((hr - hr_floor) * 60);
			hr = hr_floor;
			if(min >= 60) {
				hr += Math.floor(min / 60);
				min = min % 60;
			}
			var total_min = hr*60+min;
			min = (min < 10) ? '0'+min : min;

			var inp = {hours: hr, minutes: min, total_minutes: total_min};

			return inp;
		},
		isBlank: function() {
			return this.getValue(true) == 0;
		},
		validate: function(evt) {
			this.invalid = false;
			var all_day = this.getAllDay();
			if(! all_day && this.required && this.isBlank()) {
				this.invalid = true;
				this.invalidMsg = 'required';
			}
			if(this.customValidate)
				this.customValidate();
			this.updateDisplay();
			return ! this.invalid;
		},
		focus: function() {
			if(this.getAllDay())
				this.all_day_field.focus();
			else if(this.time_field) {
				this.time_field.focus();
				this.time_field.select();
			}
		},
		getValue: function(nativeVal) {
			var ret = this.field ? this.field.value : '';
			if(nativeVal) ret = parseFloat(ret || 0);
			return ret;
		},
		getDisplayValue: function() {
			return this.time_field ? this.time_field.value : '';
		},
		getAllDay: function() {
			return this.all_day_field && this.all_day_field.getValue();
		},
		updateDisplay: function() {
			UI.addRemoveClass(this.time_field, 'invalid', this.invalid);
			if(this.time_field)
				this.time_field.disabled = (this.all_day_field && this.all_day_field.getValue());
		}
	};


	var DateFilterInput = UI.DateFilterInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.focused = false;
		this.invalid = false;
		if(params) YLang.augmentObject(this, params, true);
	}
	DateFilterInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt)
				this.elt = $(this.id);
			var basename = this.name ? this.name.replace(/-filter$/, '') : '';
			if(this.form && basename) {
				if(! this.date_field)
					this.date_field = UI.getFormInput(this.form, basename);
				if(! this.end_field)
					this.end_field = UI.getFormInput(this.form, basename + '-end');
				if(! this.operator_field)
					this.operator_field = UI.getFormInput(this.form, basename + '-operator');
				if(! this.period_field)
					this.period_field = UI.getFormInput(this.form, basename + '-period');
			}
			if(! this.elt)
				return;
			this.addHooks();
			this.updateDisplay();
			this.set_up = true;
		},
		addHooks: function() {
			var input = this, o = this.operator_field, d = this.date_field, e = this.end_field, p = this.period_field;
			var focus = function(evt) { input.handleFocus(evt || window.event); }
			var blur = function(evt) { input.handleBlur(evt || window.event); }
			if(o) {
				o.onchange = function() { input.handleOperator(this.getValue()); }
				o.onfocus = focus;
				o.onblur = blur;
			}
			if(d) {
				d.onchange = function() { input.handleDateChanged(); }
				d.onfocus = focus;
				d.onblur = blur;
			}
			if(e) {
				e.onchange = function() { input.handleDateChanged(); }
				e.onfocus = focus;
				e.onblur = blur;
			}
			if(p) {
				p.onchange = function() { input.handlePeriodChanged(); }
				p.onfocus = focus;
				p.onblur = blur;
			}
		},
		getOperator: function() {
			if(this.operator_field)
				return this.operator_field.getValue();
		},
		getOperatorParamType: function() {
			var oper = this.getOperator();
			if(oper == 'on_date' || oper == 'not_on_date' || oper == 'before_date' || oper == 'after_date' || oper == 'between_dates')
				return 'date';
			if(oper == 'period_current' || oper == 'period_next' || oper == 'period_prev')
				return 'period';
			return '';
		},
		handleOperator: function(newval) {
			this.updateDisplay();
			var ptype = this.getOperatorParamType();
			this.checkSubmit(true);
			if(ptype == 'date' && this.date_field)
				this.date_field.focus();
			else if(ptype == 'period' && this.period_field)
				this.period_field.focus();
		},
		handleFocus: function() {
			this.focused = true;
			this.updateDisplay();
		},
		handleBlur: function() {
			this.focused = false;
			this.updateDisplay();
		},
		handleDateChanged: function() {
			this.checkSubmit();
		},
		handlePeriodChanged: function() {
			this.checkSubmit();
		},
		checkSubmit: function(op_changed) {
			if(this.auto_submit) {
				if(op_changed) {
					var ptype = this.getOperatorParamType();
					if(ptype == 'date' && ! this.date_field.getValue())
						return;
					else if(ptype == 'period' && ! this.period_field.getValue())
						return;
				}
				UI.submitForm(this.form);
			}
		},
		updateDisplay: function() {
			UI.addRemoveClass(this.elt, 'active', this.focused);
			UI.addRemoveClass(this.elt, 'invalid', this.invalid);
			if(this.operator_field) {
				var ptype = this.getOperatorParamType();
				if(this.date_field)
					toggleDisplay(this.date_field.elt, ptype == 'date');
				if(this.end_field)
					toggleDisplay(this.end_field.elt, this.getOperator() == 'between_dates');
				if(this.period_field)
					toggleDisplay(this.period_field.outer, ptype == 'period');
			}
		}
	};


	var TextFilterInput = UI.TextFilterInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.focused = false;
		this.invalid = false;
		if(params) YLang.augmentObject(this, params, true);
	}
	TextFilterInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt)
				this.elt = $(this.id);
			var basename = this.name ? this.name.replace(/-filter$/, '') : '';
			var baseid = this.id.replace(/-filter$/, '');
			if(this.form && basename) {
				if(! this.field)
					this.field = UI.getFormInput(this.form, basename);
				if(! this.field_outer)
					this.field_outer = $(baseid + '-valouter');
				if(! this.operator_field)
					this.operator_field = UI.getFormInput(this.form, basename + '-operator');
			}
			if(! this.elt)
				return;
			this.addHooks();
			this.updateDisplay();
			this.set_up = true;
		},
		addHooks: function() {
			var input = this, o = this.operator_field, f = this.field;
			var focus = function(evt) { input.handleFocus(evt || window.event); }
			var blur = function(evt) { input.handleBlur(evt || window.event); }
			if(o) {
				o.onchange = function() { input.handleOperator(this.getValue()); }
				o.onfocus = focus;
				o.onblur = blur;
			}
			if(f) {
				f.onfocus = focus;
				f.onblur = blur;
			}
		},
		getOperator: function() {
			if(this.operator_field)
				return this.operator_field.getValue();
		},
		handleOperator: function(newval) {
			this.updateDisplay();
			this.field.focus();
		},
		handleFocus: function() {
			this.focused = true;
			this.updateDisplay();
		},
		handleBlur: function() {
			this.focused = false;
			this.updateDisplay();
		},
		updateDisplay: function() {
			UI.addRemoveClass(this.elt, 'active', this.focused);
			UI.addRemoveClass(this.elt, 'invalid', this.invalid);
		}
	};


	var NumberFilterInput = UI.NumberFilterInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.focused = false;
		this.invalid = false;
		if(params) YLang.augmentObject(this, params, true);
	}
	NumberFilterInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt)
				this.elt = $(this.id);
			var basename = this.name ? this.name.replace(/-filter$/, '') : '';
			var baseid = this.id.replace(/-filter$/, '');
			if(this.form && basename) {
				if(! this.number_field)
					this.number_field = UI.getFormInput(this.form, basename);
				if(! this.number_outer)
					this.number_outer = $(baseid + '-valouter');
				if(! this.end_field)
					this.end_field = UI.getFormInput(this.form, basename + '-end');
				if(! this.end_outer)
					this.end_outer = $(baseid + '-endouter');
				if(! this.operator_field)
					this.operator_field = UI.getFormInput(this.form, basename + '-operator');
			}
			if(! this.elt)
				return;
			this.addHooks();
			this.updateDisplay();
			this.set_up = true;
		},
		addHooks: function() {
			var input = this, o = this.operator_field, n = this.number_field, e = this.end_field;
			var focus = function(evt) { input.handleFocus(evt || window.event); }
			var blur = function(evt) { input.handleBlur(evt || window.event); }
			if(o) {
				o.onchange = function() { input.handleOperator(this.getValue()); }
				o.onfocus = focus;
				o.onblur = blur;
			}
			if(n) {
				n.onfocus = focus;
				n.onblur = blur;
			}
			if(e) {
				e.onchange = function() { /* console.log('end date changed'); */ }
				e.onfocus = focus;
				e.onblur = blur;
			}
		},
		getOperator: function() {
			if(this.operator_field)
				return this.operator_field.getValue();
		},
		getOperatorParamType: function() {
			var oper = this.getOperator();
			if(! oper || oper == 'empty' || oper == 'not_empty')
				return '';
			return 'number';
		},
		handleOperator: function(newval) {
			this.updateDisplay();
			var ptype = this.getOperatorParamType();
			if(ptype == 'number' && this.number_field)
				this.number_field.focus();
		},
		handleFocus: function() {
			this.focused = true;
			this.updateDisplay();
		},
		handleBlur: function() {
			this.focused = false;
			this.updateDisplay();
		},
		updateDisplay: function() {
			UI.addRemoveClass(this.elt, 'active', this.focused);
			UI.addRemoveClass(this.elt, 'invalid', this.invalid);
			if(this.operator_field) {
				var ptype = this.getOperatorParamType();
				if(this.number_outer)
					toggleDisplay(this.number_outer, ptype == 'number');
				if(this.end_outer)
					toggleDisplay(this.end_outer, this.getOperator() == 'between');
			}
		}
	};


    var AlphabetInput = UI.AlphabetInput = function(id, params) {
        this.id = id;
        this.onchange = null;
        this.focused = false;
        if(params) YLang.augmentObject(this, params, true);
    };
    AlphabetInput.prototype = {
        setup: function() {
            if(this.set_up)
                return;
            if(! this.field) {
                if(this.name && this.form)
                    this.field = this.form.elements[this.name];
                else if(this.field_id)
                    this.field = $(this.field_id);
            }
            this.addHooks();
            this.set_up = true;
        },
        addHooks: function() {
            if(this.id) {
                var ed = this;
                var letter;
                var letter_id = '';
                var letter_elem = null;
                for(optionCounter = 65; optionCounter < 91; optionCounter++) {
                    letter = String.fromCharCode(optionCounter);
                    letter_id = this.id +'-'+ letter;
                    letter_elem = $(letter_id);
                    if (letter_elem)
                        letter_elem.onclick = function(evt) { return ed.handleClick(evt || window.event, this.innerHTML); };
                }
            }
        },
        render: function() {
            // NYI
        },
        getValue: function() {
            return (this.field) ? this.field.value : '';
        },
        handleClick: function(evt, value) {
            var val;
            if(this.field)
                this.field.value = val = value;
            UI.callEvent(this, this.onchange, evt, val);
            if(this.auto_submit)
                UI.submitForm(this.form);
            return false;
        }
    };


	var ScrollPanel = UI.ScrollPanel = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.pos = 0;
		this.pos_top = 0;
		this.step = 10;
		this.steps = 0;
		if(params) YLang.augmentObject(this, params, true);
	}
	ScrollPanel.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt && this.id)
				this.elt = $(this.id);
			if(this.elt && ! this.content) {
				if(this.content_id)
					this.content = $(this.content_id);
				else if(YDom.hasClass(this.elt.firstChild, 'scroll-content'))
					this.content = this.elt.firstChild;
			}
			this.set_up = true;
		},
		render: function() {
			var scroll = this;
			var outer = this.elt;
			if(! outer) {
				var extcls = this.ext_class || '';
				outer = this.elt = createElement2('div', {id: this.id, className: 'input-scroll '+extcls});
			}
			var stop_event = function(evt) { YEvent.stopEvent(evt); }
			var handle_click = function(evt) { scroll.handleClick(evt); stop_event(evt); }
			outer.onmousedown = function(evt) { handle_click(evt); scroll.scrollContent('bar', evt); }
			outer.onselectstart = stop_event;

			var inner = this.content;
			if(! inner) {
				inner = this.content = createElement2('div', {className: 'scroll-content'});
				outer.appendChild(inner);
			}
			var onclick = function(evt) {
				handle_click(evt);
				scroll.scrollContent(this.act, evt);
			}

			for(var i = 0; i < outer.childNodes.length; i++) {
				var node = outer.childNodes[i];
				if(node !== inner) {
					if(YDom.hasClass(node, 'up') && ! this.up_button)
						this.up_button = node;
					else if(YDom.hasClass(node, 'down') && ! this.down_button)
						this.down_button = node;
					else if(YDom.hasClass(node, 'pos') && ! this.pos_button)
						this.pos_button = node;
					else {
						outer.removeChild(node);
						i --;
					}
				}
			}

			if(! this.up_button) {
				this.up_button = createElement2('div', {className: 'scroll-button input-outer up'});
				this.up_button.appendChild(createElement2('div', {className: 'input-icon'}));
				outer.appendChild(this.up_button);
			}
			setAttrs(this.up_button, {act: 'up', onclick: onclick, onmousedown: handle_click, onselectstart: stop_event});
			if(! this.down_button) {
				this.down_button = createElement2('div', {className: 'scroll-button input-outer down'});
				this.down_button.appendChild(createElement2('div', {className: 'input-icon'}));
				outer.appendChild(this.down_button);
			}
			setAttrs(this.down_button, {act: 'down', onclick: onclick, onmousedown: handle_click, onselectstart: stop_event});
			if(! this.pos_button) {
				this.pos_button = createElement2('div', {className: 'scroll-button input-outer pos'});
				this.pos_button.appendChild(createElement2('div', {className: 'input-icon'}));
				outer.appendChild(this.pos_button);
			}
			this.makeDragTarget(this.pos_button, null, {mousedown: handle_click});
			return outer;
		},
		handleClick: function(evt) {
			UI.callEvent(this, this.onclick, evt);
		},
		destroy: function() {
			this.destroyDragTarget(this.pos_button);
			this.elt = null;
			this.inner = null;
			this.up_button = this.down_button = this.pos_button = null;
		},
		getMax: function() {
			return (this.steps - 1) * this.step;
		},
		showStep: function(step) {
			if(! this.elt.clientHeight) return;
			var showtop = step * this.step;
			var showbottom = showtop + this.step;
			var pos_t = this.pos;
			var pos_b = pos_t + this.elt.clientHeight;
			if(pos_t > showtop) {
				if(pos_b >= showbottom)
					pos_t = showtop;
			} else if(pos_b < showbottom)
				pos_t = showbottom - this.elt.clientHeight + 1;
			if(pos_t != this.pos)
				this.scrollContent(pos_t);
		},
		setSteps: function(steps, offset) {
			this.steps = steps;
			if(isset(offset))
				this.showStep(offset);
			this.scrollContent();
		},
		scrollContent: function(dir, evt) {
			var step_mult = 1;
			if(dir == 'bar') {
				if(! this.pos_button) return;
				var btnpos = UI.getEltRegion(this.pos_button),
					xy = YEvent.getXY(evt);
				if(! btnpos) return;
				if(xy[1] < btnpos.top) dir = 'up';
				else dir = 'down';
				step_mult = 3;
			}
			var pos = this.pos;
			var max = this.getMax();
			if(dir == 'down') {
				if(pos % this.step > 3)
					pos += this.step * step_mult - (pos % this.step);
				else
					pos += this.step * step_mult + (pos % this.step);
			}
			else if(dir == 'up') {
				if(pos % this.step > 3)
					pos -= (pos % this.step * step_mult);
				else
					pos -= this.step * step_mult + (pos % this.step);
			}
			else if(isset(dir)) {
				pos = dir;
			}
			if(pos < 0) pos = 0;
			else if(pos > max) pos = max;
			var elth = this.elt.clientHeight;
			if(max <= 0) {
				pos = 0;
				YDom.addClass(this.elt, 'disabled');
			} else {
				YDom.removeClass(this.elt, 'disabled');
				this.pos_h = Math.round(Math.max(13, elth / (max + elth) * (elth - 32)));
				this.pos_h = Math.min(this.pos_h, 200);
				this.pos_top = Math.round((elth - 34 - this.pos_h) * pos / max);
				if(this.pos_button) {
					this.pos_button.style.height = '' + this.pos_h + 'px';
					this.pos_button.firstChild.style.top = '' + Math.round((this.pos_h - 15) / 2) + 'px';
					this.pos_button.style.top = '' + (this.pos_top + 16) + 'px';
				}
			}
			this.pos = pos;
			var tprop = UI.getTransformProperty();
			if(tprop) {
				if(pos || this.content.style[tprop]) {
					if(isIPhone)
						this.content.style[tprop] = 'translate3d(0, ' + (- pos) + 'px, 0)';
					else {
						if(tprop == 'webkitTransform') {
							// fix intermittent screen flash in Chrome 12
							// chromium issue 95026 - remove once fixed in browser
							// note - enforces 3D mode, which currently messes up anti-aliasing a bit
							this.content.style.webkitTransformStyle = 'preserve-3d';
						}
						this.content.style[tprop] = 'translateY(' + (- pos) + 'px)';
					}
				}
			}
			else
				this.content.style.top = '' + (- pos) + 'px';
		},
		ondragstart: function(evt, info) {
			YDom.addClass(this.pos_button, 'active');
			info.pos_top = this.pos_top;
		},
		ondragend: function(evt, info) {
			YDom.removeClass(this.pos_button, 'active');
		},
		ondrag: function(evt, info) {
			var max = this.getMax();
			var pos_top = info.pos_top + info.dragY;
			var pos = Math.round(pos_top * max / (this.elt.clientHeight - 32 - this.pos_h));
			this.pos = pos;
			this.scrollContent();
		}
	};
	YLang.augment(ScrollPanel, DragHandler);


	var CurrencySelect = UI.CurrencySelect = function(id, params) {
		if(! params) params = {};
		if(! params.options) params.options = {dom_name: 'model.Currency'};
		SelectInput.call(this, id, params);
	};
	YLang.extend(CurrencySelect, SelectInput, {
		setup: function() {
			if(! this.rate_field) {
				if(this.form && this.exchange_rate)
					this.rate_field = UI.getFormInput(this.form, this.exchange_rate);
			}
			if(! this.rate_button) {
				this.rate_button = $(this.id + '-editrate');
			}
			SelectInput.prototype.setup.call(this);
		},
		getDecimals: function(currency_id) {
			var v = this.getOptionValue(currency_id);
			return v ? parseInt(v.decimal_places, 10) : 2;
		},
		getShortName: function(currency_id, add_rate) {
			var v = this.getOptionValue(currency_id),
				ret = v ? v.iso4217 : '';
			if(add_rate && ret) ret += ' : ' + this.getSymbol(currency_id);
			return ret;
		},
		getSymbol: function(currency_id) {
			var v = this.getOptionValue(currency_id);
			return v ? v.symbol : '';
		},
		getRate: function(nativeVal, currency_id) {
			var rate = 1.0;
			if(isset(currency_id) && currency_id != this.getValue())
				rate = this.getStandardRate(currency_id);
			else if(this.rate_field)
				rate = stdUnformatNumber(this.rate_field.getValue());
			if(nativeVal) rate = parseFloat(rate);
			return rate;
		},
		getStandardRate: function(currency_id) {
			var rate, v = this.getOptionValue(currency_id);
			if(v) rate = parseFloat(v.conversion_rate);
			return rate || 1.0;
		},
		setRate: function(val, silent) {
			var oldrate = this.getRate(true);
			var curid = this.getValue();
			if(! curid || curid === '-99' || ! val)
				val = 1.0;
			if(this.rate_field)
				this.rate_field.setValue(stdFormatNumber(val, 5, 5), silent);
			if(! silent)
				UI.callEvent(this, this.onrateupdate, oldrate, this.getRate(true));
		},
		addHooks: function() {
			SelectInput.prototype.addHooks.call(this);
			if(this.rate_button) {
				var self = this;
				this.rate_button.onclick = function(evt) { self.showRatePopup(); }
			}
		},
		getRatePopupOffset: function() {
			return {align: 'right', left: -3};
		},
		showRatePopup: function() {
			if(this.rate_popup) {
				this.rate_popup.close();
				return;
			}
			var self = this,
				div = createElement2('div', {className: 'quick-input-content', style: 'width: 180px'});
			this.edit_rate = new TextInput(this.id+'-edit', {format: 'float', decimals: 5,
				init_value: stdFormatNumber(this.getRate(), 5, 5), size: 10,
				onchange: function() {
					toggleDisplay(self.reset_rate.elt, self.haveCustomRate(this.getValue(true)));
				},
				onreturn: function() {
					self.savePopupRate();
				}
			});
			div.appendChild(createElement2('p', {className: 'topLabel'}, app_string('LBL_EXCHANGE_RATE')));
			div.appendChild(this.edit_rate.render());

			this.save_rate = new ButtonInput(this.id+'-update',
				{icon: 'icon-accept', label: app_string('LBL_UPDATE'),
					onclick: function(evt) { self.savePopupRate(); } });
			this.reset_rate = new ButtonInput(this.id+'-reset',
				{icon: 'icon-cancel', label: app_string('LBL_RESET_BUTTON_LABEL'),
					onclick: function(evt) { self.resetPopupRate(); } });
			if(! self.haveCustomRate()) this.reset_rate.style = 'display: none';
			var buttons = [this.save_rate.render(), nbsp(), this.reset_rate.render()];
			createElement2('div', {style: 'margin-top: 0.3em'}, buttons, div);

			this.rate_popup = new PopupSlidePanel(this.id+'-ratepopup',
				{target: this.rate_button, target_offset: this.getRatePopupOffset(), content_elt: div, destroy_on_close: true});
			this.rate_popup.render();
			this.rate_popup.ondestroy = function() {
				if(self.edit_rate) self.edit_rate.destroy();
				self.edit_rate = null;
				self.rate_popup = null;
			}
			this.rate_popup.onshow = function() {
				self.edit_rate.focus();
			}
			this.rate_popup.show();
		},
		haveCustomRate: function(rate) {
			if(! rate) rate = this.getRate(true);
			return (rate != this.getStandardRate());
		},
		resetPopupRate: function() {
			if(this.edit_rate) {
				this.edit_rate.setValue(this.getStandardRate());
				this.edit_rate.focus();
				toggleDisplay(this.reset_rate.elt, false);
			}
		},
		savePopupRate: function() {
			if(this.edit_rate) {
				this.setRate(this.edit_rate.getValue(true));
			}
			if(this.rate_popup)
				this.rate_popup.close();
		},
		update: function(key, value, silent, rate) {
			if(! key) key = '-99';
			SelectInput.prototype.update.call(this, key, value, silent);
			var rate = get_default(rate, value.conversion_rate);
			this.setRate(rate, silent);
		},
		setValueAndRate: function(key, rate, silent) {
			var value = this.getOptionValue(key || '-99');
			this.update(key, value, silent, rate);
		},
		updateDisplay: function() {
			var cid = this.getValue();
			if(this.rate_button) {
				this.rate_button.style.display = (! cid || cid == '-99' ? 'none' : '');
			}
			UI.addRemoveClass(this.elt, 'hard-right', (!! this.rate_button && cid != '-99'));
		},
		setDisabled: function(disabled) {
			SelectInput.prototype.setDisabled.call(this, disabled);
			if(this.disabled && this.rate_popup) this.rate_popup.close();
			if(this.rate_button) this.rate_button.disabled = this.disabled;
		}
	});


	var OwnerSelect = UI.OwnerSelect = function(id, params) {
		SelectInput.call(this, id, params);
	};
	YLang.extend(OwnerSelect, SelectInput, {
		userUpdate: function(key, value) {
			this.update(key, value);
		},
		update: function(key, value, silent) {
			if(key == 'select')
				this.showSelectUser();
			else {
				if(YLang.isString(value))
					value = {label: value};
				if(! value.icon) value.icon = 'icon-user';
				if(! this.menu.hasKey(key))
					this.menu.addOption(key, value);
				SelectInput.prototype.update.call(this, key, value, silent);
			}
		},
		showSelectUser: function() {
			var request_data = {
					form_name: this.form.getAttribute('id') || this.form.getAttribute('name'),
					call_back_function: this.popup_callback || 'ui_popup_return',
					passthru_data: {ui_input_name: this.name || this.id},
					field_to_name_array: this.field_to_name || {id: 'id', label: 'name'}
				},
				params = {module: 'Users', request_data: request_data, inline: true};
			open_popup_window(params);
		}
	});


	var TabGroup = UI.TabGroup = function(id, params) {
		this.id = id;
		this.tabs = [];
		this.current_tab = null;
		this.hover_tab = null;
		this.focus_tab = null;
		this.base_zindex = 1;
		this.manage_sections = {};
		if(params)
			YLang.augmentObject(this, params, true);
	};
	TabGroup.prototype = {
		focus: function() {
			if(! isset(this.focus_tab))
				this.focus_tab = this.active_tab;
			var t = this.getTab(this.focus_tab, true);
			if(t && t.elt)
				t.elt.focus();
		},
		getPosition: function(name) {
			for(var i = 0; i < this.tabs.length; i++)
				if(this.tabs[i].name == name)
					return i;
		},
		loadTabs: function(tabs) {
			if(YLang.isArray(tabs))
				this.tabs = tabs;
			var i, t;
			for(i = 0; i < this.tabs.length; i++) {
				// identify tab elements
				t = this.tabs[i];
				if(! isset(t) || typeof(t) != 'object') {
					this.tabs.splice(i, 1);
					i --;
					continue;
				}
				if(t.separator) continue;
				if(! t.elt) {
					if(t.id)
						t.elt = $(t.id);
					else if(t.name)
						t.elt = $(this.id+'-tab-'+t.name);
				}
				if(! t.outer_elt) {
					if(t.outer_id)
						t.outer_elt = $(t.outer_id);
					else if(t.name)
						t.outer_elt = $(this.id+'-tabouter-'+t.name);
				}
			}
		},
		setup: function() {
			if(this.set_up) return;
			if(! this.elt)
				this.elt = $(this.id);
			if(! this.field) {
				if(this.name && this.form)
					this.field = this.form.elements[this.name];
				else if(this.field_id)
					this.field = $(this.field_id);
			}
			this.loadTabs();
			this.addHooks();
			if(this.field && ! isset(this.current_tab))
				this.setValue(this.field.value, true, true);
			this.set_up = true;
			this.showHideSections();
			this.updateDisplay();
		},
		handleClick: function(evt, tab) {
			this.setValue(tab && tab.name);
		},
		handleFocus: function(evt, tab) {
			this.setFocus(tab && tab.name);
		},
		handleBlur: function(evt, tab) {
			this.setFocus(null);
		},
		mouseOver: function(evt, tab) {
			this.setHover(tab && tab.name);
		},
		mouseOut: function(evt, tab) {
			this.setHover(null);
		},
		addHooks: function() {
			var i, t;
			for(i = 0; i < this.tabs.length; i++) {
				t = this.tabs[i];
				if(t.hidden || t.separator || t.disabled) continue;
				YEvent.addListener(t.elt, 'mouseover', this.mouseOver, t, this);
				YEvent.addListener(t.elt, 'mouseout', this.mouseOut, t, this);
				YEvent.addListener(t.elt, 'click', this.handleClick, t, this);
				YEvent.addListener(t.elt, 'focus', this.handleFocus, t, this);
				YEvent.addListener(t.elt, 'blur', this.handleBlur, t, this);
			}
			if(this.elt) this.elt.onmousedown = function() { return false; }
		},
		setHover: function(name) {
			var t = this.getTab(name, true);
			if(t)
				this.hover_tab = name;
			else
				this.hover_tab = this.focus_tab;
			this.updateDisplay();
		},
		setFocus: function(name) {
			var t = this.getTab(name, true);
			if(t)
				this.focus_tab = this.hover_tab = name;
			else
				this.focus_tab = this.hover_tab = null;
			this.updateDisplay();
		},
		setValue: function(name, silent, no_redraw) {
			var t = this.getTab(name, true);
			if(t) {
				if(! t.disable_select) {
					this.current_tab = name;
					if(this.field)
						this.field.value = this.current_tab;
					if(! no_redraw) {
						this.updateDisplay();
						this.showHideSections();
					}
				}
				if(! silent) {
					if(t.perform)
						UI.callEvent(this, t.perform, t);
					UI.callEvent(this, this.onchange, t);
				}
			}
		},
		showHideTab: function(name, state) {
			var idx = this.getPosition(name);
			if(! isset(state)) state = -1;
			if(isset(idx)) {
				if(state === -1)
					this.tabs[i].hidden = ! this.tabs[i].hidden;
				else
					this.tabs[i].hidden = state ? 1 : 0;
				if(this.tabs[i].hidden) {
					if(this.focus_tab == name)
						this.focus_tab = null;
					if(this.hover_tab == name)
						this.hover_tab = null;
					if(this.current_tab == name)
						this.setValue(null);
				}
				this.updateDisplay();
			}
		},
		enableDisableTab: function(name, state) {
			var t, idx = this.getPosition(name);
			if(! isset(state)) state = -1;
			if(isset(idx))
				t = this.tabs[idx];
			if(t && ! t.separator) {
				if(state === -1)
					t.disabled = ! t.disabled;
				else
					t.disabled = state ? 1 : 0;
				if(t.disabled) {
					if(this.focus_tab == name)
						this.focus_tab = null;
					if(this.hover_tab == name)
						this.hover_tab = null;
					if(this.current_tab == name)
						this.setValue(null);
				}
				if(! t.hidden)
					this.updateDisplay();
			}
		},
		getTab: function(name, selectable) {
			var t, idx = name ? this.getPosition(name) : null;
			if(isset(idx))
				t = this.tabs[idx];
			if(t && (! selectable || (! t.hidden && ! t.separator && ! t.disabled)))
				return t;
		},
		setLabel: function(name, label) {
			var idx = this.getPosition(name);
			this.tabs.label = label;
			// FIXME find label element and set value
		},
		render: function() {
		},
		destroy: function() {
			for(var i = 0; i < this.tabs.length; i++) {
				YEvent.purgeElement(this.tabs[i].elt);
				this.tabs[i].elt = this.tabs[i].outer_elt = null;
			}
		},
		getVisibleTabs: function() {
			var ret = [], i, t, rt, sep = false;
			for(i = 0; i < this.tabs.length; i++) {
				t = this.tabs[i];
				if(t.hidden)
					continue;
				if(t.separator) {
					sep = true;
					if(ret.length)
						ret[ret.length-1].pre_sep = true;
					continue;
				}
				rt = {index: i, name: t.name, pre_sep: false, post_sep: sep};
				rt.current = (t.name == this.current_tab);
				rt.hover = (t.name == this.hover_tab);
				rt.focus = (t.name == this.focus_tab);
				rt.disabled = !! t.disabled;
				ret.push(rt);
				sep = false;
			}
			if(ret.length) {
				ret[0].first = true;
				ret[ret.length-1].last = true;
			}
			return ret;
		},
		updateDisplay: function() {
			var i, t, ts = this.getVisibleTabs();
			for(i = 0; i < ts.length; i++) {
				t = this.tabs[ts[i].index];
				if(t.outer_elt) {
					if(ts[i].current)
						t.outer_elt.style.zIndex = this.base_zindex + ts.length;
					else
						t.outer_elt.style.zIndex = this.base_zindex + ts.length - i - 1;
					UI.addRemoveClass(t.outer_elt, 'tab-current', ts[i].current);
					UI.addRemoveClass(t.outer_elt, 'tab-active', ts[i].focus);
					UI.addRemoveClass(t.outer_elt, 'tab-hover', ts[i].hover);
					UI.addRemoveClass(t.outer_elt, 'tab-disabled', ts[i].disabled);
					UI.addRemoveClass(t.outer_elt, 'presep', ts[i].pre_sep);
					UI.addRemoveClass(t.outer_elt, 'postsep', ts[i].post_sep);
				}
			}
		},
		showHideSections: function() {
			if(this.manage_sections) {
				var s, info, hide, i;
				for(s in this.manage_sections) {
					info = this.manage_sections[s];
					hide = true;
					if(YLang.isArray(info)) {
						for(i = 0; i < info.length; i++)
							if(info[i] === this.current_tab) {
								hide = false;
								break;
							}
					}
					toggleDisplay(s, ! hide);
				}
			}
			if(PopupManager.current_modal) {
				PopupManager.reposition();
			}
		}
	}


	var ButtonInput = UI.ButtonInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		this.onclick = null;
		if(params) YLang.augmentObject(this, params, true);
	}
	ButtonInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt) {
				if(! (this.elt = $(this.id)) )
					return;
			}
			this.addHooks();
			this.set_up = true;
		},
		addHooks: function() {
			YEvent.addListener(this.elt, 'click', this.handleClick, this, true);
		},
		handleClick: function(evt) {
			UI.callEvent(this, this.onclick);
		},
		render: function() {
			if(! this.elt) {
				var body = [];
				if(this.icon)
					body.push(createElement2('div', {className: 'input-icon left '+this.icon}));
				if(this.label)
					body.push(createElement2('span', {className: 'input-label'}, this.label));
				this.elt = createElement2('button', {type: this.button_type || 'button', className: 'input-button input-outer'}, body);
				if(this.style) setAttr(this.elt, 'style', this.style);
				this.setup();
			}
			return this.elt;
		},
		destroy: function() {
			YEvent.purgeElement(this.elt);
			UI.domRemoveElt(this.elt);
			this.elt = null;
		}
	};


	var AddressInput = UI.AddressInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		if(params) YLang.augmentObject(this, params, true);
		if(! this.parts)
			this.parts = {};
	}
	AddressInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt) {
				if(! (this.elt = $(this.id)) )
					return;
			}
			if(! this.copy_elt)
				this.copy_elt = $(this.id + '-copy');
			if(this.copy_elt && this.copy_to && ! this.menu) {
				var opts = {keys: [], values: []}, self=this;

                if (this.copy_to_rel_contacts) {
                    opts.keys.push('');
                    opts.values.push({
                        label: app_string('LBL_NONE'),
                        perform: function() { self.updateCopyTo('', ''); }
                    });
                }

				for(var i = 0; i < this.copy_to.length; i++) {
					var inp = UI.getFormInput(this.form, this.copy_to[i]),
                        copy_from = this.name;
					if(inp) {
						opts.keys.push(inp.name);
                        (function(sel_id, input, from, copy_rel) {
                            opts.values.push({
                                label: inp.getLabel(),
                                perform: function() { if (copy_rel) { self.updateCopyTo('', ''); } input.copyFrom(from); }
                            });
                        })(self.id, inp, copy_from, this.copy_to_rel_contacts)
					}
				}

                if (this.copy_to_rel_contacts) {
                    var copy_targets = {primary: 'LBL_ADDRESS_COPY_CONTACTS_PRIMARY',
                        alt: 'LBL_ADDRESS_COPY_CONTACTS_OTHER', both: 'LBL_ADDRESS_COPY_CONTACTS_BOTH'};
                    createElement2('input', {type: 'hidden', name: 'copy_' + copy_from, id: self.id+'-copy_target'}, null, this.form);

                    for (var target in copy_targets) {
                        opts.keys.push(target);
                        var lbl = app_string(copy_targets[target]);
                        (function(sel_id, copy_target, label) {
                            opts.values.push({
                                label: label,
                                perform: function() {
                                    self.updateCopyTo(label, copy_target);
                                    if (this.copy_status_id) UI.hideStatus(this.copy_status_id);
                                    this.copy_status_id = UI.showStatus(app_string('LBL_ADDRESS_COPY_USER_MSG'), 3000);
                                }
                            });
                        })(self.id, target, lbl)
                    }

                    opts.width = '25em';
                }
                this.menu = new MenuSource(this.copy_elt, {options: opts});
				this.menu.setup();
			}
			this.set_up = true;
		},
        updateCopyTo: function(label, value) {
            if ($(this.id+'-message'))
                $(this.id+'-message').innerHTML = label;
            if ($(this.id+'-copy_target'))
                $(this.id+'-copy_target').value = value;
        },
		getLabel: function() {
			return this.label;
		},
		getFields: function() {
			var ret = {};
			for(var k in this.parts)
				ret[k] = UI.getFormInput(this.form, this.parts[k]);
			return ret;
		},
		copyFrom: function(other) {
			var other = UI.getFormInput(this.form, other);
			if(other) {
				var other_fs = other.getFields(),
					my_fs = this.getFields();
				for(var k in other_fs) {
					if(my_fs[k]) {
						if(my_fs[k] instanceof RefInput)
							my_fs[k].update(other_fs[k].getKey(), other_fs[k].getValue());
						else
							my_fs[k].setValue(other_fs[k].getValue());
					}
				}
			}
		}
	};

    var QuickElt = UI.QuickElt = function(id, params) {
   		if(isElement(id)) {
   			this.value_elt = id;
   			this.id = this.value_elt.id;
   		} else
   			this.id = id;
        this.elt = null;
   		if(params) YLang.augmentObject(this, params, true);
   	}
   	QuickElt.prototype = {
   		setup: function() {
            if(this.set_up)
                return;
            if(! this.value_elt) {
                if(! (this.value_elt = $(this.id)) )
                    return;
            }
           var val = '';
            if (this.type == 'enum') {
               var opts = {'keys': this.options.keys, 'values': this.options.values};
               var select_opts = new SelectOptions(opts);
               this.elt = new QuickSelect({'options': select_opts, 'default': this.default_val, 'elt': this.value_elt});
               val = this.selected;
            } else {
               this.elt = new QuickText({});
            }
            this.init(this.callback, val);
            this.set_up = true;
   		},
        init: function (need_callback, value) {
            if(this.initialized)
                return;
            var callback = null;

            if (need_callback) {
                function ready() {
                    var row = this.getResult();
                    if(row.result == 'ok') {
                        var frm = row.list_id + '-ListUpdate';
                        var conn_params = {};
                        conn_params.resultDiv = '' + row.list_id + '-outer';
                        return UI.sendForm(frm, {"record_perform": "subpanel_render"}, conn_params);
                    }
                    return false;
                }
                callback = ready;
            }
            var params = this;

            this.elt.init(value, function() {
                var query_params = {
                    list_id: params.list_id,
                    link_name: params.link_name,
                    module: params.module,
                    field: params.field,
                    field_value: this.getValue(),
                    row_id: params.row_id
                };

                if (params.link_name) {
                    query_params['left_key'] = params.left_key;
                    query_params['left_key_value'] = params.left_key_value;
                    query_params['right_key'] = params.right_key;
                    query_params['right_key_value'] = params.right_key_value;
                }
                var req = new SUGAR.conn.JSONRequest('save_quick_edit_result', {status_msg: app_string('LBL_SAVING')}, query_params);
                req.fetch(callback); });
                this.initialized = true;
        },
        show: function() {
            this.elt.showPopup(null, this.value_elt);
            if (this.type != 'enum') {
                this.elt.field.format = this.type;
                if (this.type == 'float' || this.type == 'double')
                    this.elt.field.decimals = 2;
            }
        }
   	};


	var HiddenInput = UI.HiddenInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		if(params) YLang.augmentObject(this, params, true);
	}
	HiddenInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt) {
				if(this.form && this.name && (this.elt = this.form.elements[this.name]))
					;
				else if(! (this.elt = $(this.id)) )
					return;
			}
			this.set_up = true;
		},
		getValue: function() {
			return this.elt ? this.elt.value : '';
		},
		setValue: function(val, silent) {
			if(this.elt) this.elt.value = val;
			if(! silent)
				UI.callEvent(this, this.onchange, val);
		},
		render: function() {
			if(! this.elt) {
				this.elt = createElement2('input', {id: this.id, name: this.name, type: 'hidden', value: this.init_value || ''});
				if(this.form && this.name) this.form.appendChild(this.elt);
				this.setup();
			}
			return this.elt;
		}
	};


	var FileInput = UI.FileInput = function(id, params) {
		if(isElement(id)) {
			this.elt = id;
			this.id = this.elt.id;
		} else
			this.id = id;
		if(params) YLang.augmentObject(this, params, true);
	}
	FileInput.prototype = {
		setup: function() {
			if(this.set_up)
				return;
			if(! this.elt) {
				if(this.form && this.name && (this.elt = this.form.elements[this.name]))
					;
				else if(! (this.elt = $(this.id)) )
					return;
			}
			this.set_up = true;
		},
		focus: function() {
			if(this.elt) this.elt.focus();
		},
		getValue: function() {
			return this.elt ? this.elt.value : '';
		},
		render: function() {
			if(! this.elt) {
				this.elt = createElement2('input', {id: this.id, name: this.name, type: 'file', className: 'input-file'});
				if(this.form && this.name) this.form.appendChild(this.elt);
				this.setup();
			}
			return this.elt;
		},
		validate: function() {
			this.invalid = false;
			var value = this.getValue();
			if(this.required && ! trim(value).length) {
				this.invalid = true;
				this.invalidMsg = 'required';
			}
			this.updateDisplay();
			return ! this.invalid;
		},
		updateDisplay: function() {
			UI.addRemoveClass(this.elt, 'invalid', !! this.invalid);
		}
	};

	// Various methods for form and input field interaction

	UI.select_options = {};
	UI.all_forms = [];
	UI.form_inits = {};
	UI.getForm = function(form) {
		if(form && form.tagName === 'FORM')
			return form;
		if(typeof(form) == 'string') {
			if(document.forms[form])
				form = document.forms[form];
			else
				form = $(form);
			if(form)
				return form;
		}
		return false;
	}

	UI.registerSelectOptions = function(name, options) {
		if(options instanceof SelectOptions)
			this.select_options[name] = options;
		else
			this.select_options[name] = new SelectOptions(options);
	}
	UI.registerMenuSource = function(elt, params, form) {
		var m = new MenuSource(elt, params);
		form = this.getForm(form);
		if(form) {
			m.form = form;
			if(! form._regMenus) form._regMenus = {};
			form._regMenus[m.id] = m;
		}
		m.setup(); // may need to defer this if element doesn't exist yet
		return m;
	}
	UI.getMenuSource = function(form, name) {
		form = this.getForm(form);
		if(form && form._regMenus)
			return form._regMenus[name];
	}

	UI.registerInputs = function(form, inputs) {
		var i, inp, reg, c = 0, setup = [];
		form = this.getForm(form);
		if(form && inputs && inputs.length) {
			if(! form._regInputs) {
				form._regInputs = {};
				form._regNames = [];
			}
			for(i = 0; i < inputs.length; i++) {
				inp = inputs[i];
				reg = inp.name || inp.id;
				if(! reg)
					continue;
				form._regInputs[reg] = inp;
				form._regNames.push(reg);
				inp.form = form;
				c ++;
			}
			if(form._inited || form._initing) {
				for(i = 0; i < inputs.length; i++) {
					inputs[i].setup && inputs[i].setup();
				}
			}
		}
		return c;
	}
	UI.registerInput = function(form, input) {
		var c = UI.registerInputs(form, [input]);
		return c ? input : false;
	}
	UI.unregisterInput = function(form, input) {
		form = this.getForm(form);
		if(input && ! YLang.isString(input))
			input = input.name || input.id;
		if(form && input && form._regInputs && form._regInputs[input] && form._regNames) {
			delete form._regInputs[input];
			form._regNames.remove(input);
			return true;
		}
		return false;
	}

	UI.getFormInput = function(form, id) {
		form = this.getForm(form);
		if(form && form._regInputs)
			return get_default(form._regInputs[id], null);
	}
	UI.getFormInputs = function(form) {
		form = this.getForm(form);
		return form ? form._regInputs : null;
	}
	UI.getFormInputNames = function(form) {
		form = this.getForm(form);
		return form && form._regNames || [];
	}

	UI.focusInput = function(form, id) {
		var input = this.getFormInput(form, id);
		if(input && input.focus) input.focus();
	}
	UI.getFormInputProperty = function(form, id, name) {
		var elt = this.getFormInput(form, id);
		if(elt) return elt[name];
	}
	UI.setFormInputProperty = function(form, id, name, value) {
		var elt = this.getFormInput(form, id);
		if(elt) elt[name] = value;
	}
	UI.setFormInputValue = function(form, id, value) {
		var form = this.getForm(form),
			elt = this.getFormInput(form, id);
		if(elt && elt.setValue) elt.setValue(value);
		else if(! elt && form && form.elements[id]) form.elements[id].value = value;
	}
	UI.setFormInputValues = function(form, value_map) {
		if(! value_map) return;
		var form = this.getForm(form);
		for(var id in value_map) {
			var elt = this.getFormInput(form, id);
			if(elt && elt.setValue) elt.setValue(value_map[id]);
			else if(! elt && form && form.elements[id]) form.elements[id].value = value_map[id];
		}
	}

	UI.initForm = function(form, inputs, postInit, focus) {
		form = UI.getForm(form);
		if(! form) return;
		form._initing = true;
		if(inputs)
			UI.registerInputs(form, inputs);
		UI.checkFormInits(form);
		var allInputs = UI.getFormInputs(form);
		if(allInputs) {
			for(var k in allInputs) {
				allInputs[k].form = form;
				if(allInputs[k].setup)
					allInputs[k].setup();
			}
		}
		if(postInit)
			UI.onInitForm(form, postInit);
		form._inited = true;
		form._initing = false;
		UI.tidyForms();
		UI.all_forms.push(form);
		if(form._postInit)
			UI.callEvent(form, form._postInit, form);
	}

	UI.focusForm = function(form, controls, handler) {
        form = UI.getForm(form);
		var doFocus = function(cs, reqd) {
			if(! cs) return;
			var i, c;
			for(i = 0; i < cs.length; i++) {
				c = UI.getFormInput(form, cs[i]);
				if(c && c.focus && (! reqd || c.required)) {
					try { c.focus(); } catch(e) {}
					return true;
				}
			}
		}
        if (handler) {
            UI.callEvent(form, handler, form);
            return true;
        } else {
            var ns = UI.getFormInputNames(form);
            return doFocus(controls) ||
                doFocus(ns, true) ||
                doFocus(ns) ||
                (form.focus && form.focus());
        }
	}
	
	UI.tidyForms = function() {
		var remain = [];
		for(var i = 0; i < UI.all_forms.length; i++) {
			if(! YDom.inDocument(UI.all_forms[i]))
				UI.destroyForm(UI.all_forms[i]);
			else
				remain.push(UI.all_forms[i]);
		}
		UI.all_forms = remain;
	}
	
	UI.destroyForm = function(form) {
		//console.debug('destroying form: ', form);
		form = UI.getForm(form);
		var inputs = UI.getFormInputs(form),
			inp;
		if(inputs) {
			for(var k in inputs) {
				inp = inputs[k];
				if(inp.form === form) {
					if(inp.destroy) inp.destroy();
					delete inp.elt;
					delete inp.field;
					delete inp.form;
				}
			}
		}
		if(isset(form._regInputs)) delete form._regInputs;
		if(isset(form._regMenus)) delete form._regMenus;
		if(form._destroy)
			UI.callEvent(form, form._destroy, form);
	}
	
	UI.checkFormInits = function(form) {
		var form_id = form.id || form.name;
		if(form_id && UI.form_inits[form_id]) {
			if(form._postInit)
				form._postInit.pushArray(UI.form_inits[form_id]);
			else
				form._postInit = UI.form_inits[form_id];
			delete UI.form_inits[form_id];
		}
	}

	UI.onInitForm = function(form_name, handler) {
		if(! handler) return false;
		var form = UI.getForm(form_name);
		if(! form) {
			if(typeof(form_name) == 'string') {
				if(! UI.form_inits[form_name])
					UI.form_inits[form_name] = [];
				UI.form_inits[form_name].push(handler);
				return true;
			}
			return false;
		}
		UI.checkFormInits(form);
		if(form._inited)
			UI.callEvent(form, handler, form);
		else if(form._postInit)
			form._postInit.push(handler);
		else
			form._postInit = [handler];
		return true;
	}
	
	UI.onDestroyForm = function(form_name, handler) {
		var form = UI.getForm(form_name);
		UI.attachInputEvent(form, '_destroy', handler);
	}

	UI.validateForm = function(form) {
		var valid = true, allInputs = UI.getFormInputs(form), lbl, messages = [];
		if(allInputs) {
			for(var k in allInputs) {
				if(allInputs[k].validate) {
					try {
						if(! allInputs[k].validate()) {
							valid = false;
							//console.log('invalid:', k, allInputs[k]);
							lbl = allInputs[k].getLabel ? allInputs[k].getLabel() : allInputs[k].label;
							messages.push({name: k, label: lbl, message: allInputs[k].invalidMsg});
						}
					} catch(e) {
						valid = false;
						console.error('error validating '+k, e);
					}
				}
			}
		}
		return {status: valid, messages: messages};
	}
	
	UI.validationSummary = function(rows) {
		var missing = [], invalid = [], other = [], ret = [], show, i;
		if(rows) {
			for(i = 0; i < rows.length; i++) {
				show = rows[i].label || rows[i].name;
				if(rows[i].message === 'required')
					missing.push(show);
				else if(rows[i].message === 'invalid' || ! rows[i].message)
					invalid.push(show);
				else
					other.push('' + show + ': ' + rows[i].message);
			}
		}
		if(missing.length)
			ret.push(app_string('ERR_MISSING_REQUIRED_FIELDS') + ': ' + missing.join(', '));
		if(invalid.length)
			ret.push(app_string('ERR_INVALID_VALUE') + ': ' + invalid.join(', '));
		ret.pushArray(other);
		return ret.join("\n");
	}
	
	UI.alertInvalidForm = function(vresult) {
		alert(UI.validationSummary(vresult.messages));
	}

	UI.submitForm = function(form) {
		form = UI.getForm(form);
		if(form) {
			if(form.onsubmit && form.onsubmit() === false)
				return false;
			return form.submit();
		}
	}

	UI.updateForm = function(form, field_params) {
		var restore = {};
		form = UI.getForm(form);
		if(! form)
			return null;
		if(field_params) {
			for(var k in field_params) {
				if(! isset(field_params[k])) continue;
				var field = form.elements[k];
				if(! field) {
					field = createElement2('input', {name: k, type: 'hidden'});
					form.appendChild(field);
				}
				restore[k] = field.value;
				field.value = field_params[k];
			}
		}
		return restore;
	}

	UI.cancelEdit = function(form) {
		form = UI.getForm(form);
		if(! form)
			return false;
		if(form.in_popup && form.in_popup.value) {
			SUGAR.popups.close();
			return false;
		}
		if(form.return_url && form.return_url.value) {
			SUGAR.util.loadUrl(form.return_url.value);
		}
		else if(form.return_module && form.return_module.value) {
			var ret_mod = form.return_module.value, ret_act, ret_rec, ret_lay;
			if(form.return_action) ret_act = form.return_action.value;
			if(form.return_record) ret_rec = form.return_record.value;
			if(form.return_layout) ret_lay = form.return_layout.value;
            //if(form.layout) ret_lay = form.layout.value;
			if(! ret_act || (ret_act == 'DetailView' && ! ret_rec)) ret_act = 'index';
			var new_url = '?' + encodeQueryString({module: ret_mod, action: ret_act, record: ret_rec, layout: ret_lay});
			if(form.module && form.module.value == ret_mod)
				SUGAR.util.fetchContentMain('async.php'+new_url);
			else
				SUGAR.util.loadUrl(new_url);
		}
		else if(form.module && form.module.value) {
			UI.returnToList(form);
		}
		return false;
	}
	
	UI.returnToList = function(form) {
		form = UI.getForm(form);
		if(! form)
			return false;
		 if(form.module && form.module.value) {
			SUGAR.util.loadUrl('?module='+encodeURIComponent(form.module.value)+'&action=index');
		}
	}
	
	UI.createDuplicateFrom = function(form, target_module, target_id, link_name, param_name) {
		form = UI.getForm(form);
		if(! form)
			return false;
		var mod = form.module.value,
			act = form.action.value,
			layout = form.layout.value,
			rec_id = form.record.value,
			url = 'index.php?module='+target_module+'&action=Duplicate&record='+target_id+
				'&return_module='+mod+'&return_action='+act+'&return_record='+rec_id+'&return_layout='+layout;
		if(link_name)
			url += '&return_panel='+link_name;
		if(param_name)
			url += '&'+param_name+'='+rec_id;
		SUGAR.util.loadUrl(url);
	}

	UI.beforeSubmitForm = function(form) {
		form = UI.getForm(form);
		var allInputs = UI.getFormInputs(form);
		if(allInputs) {
			for(var k in allInputs) {
				if(allInputs[k].beforeSubmitForm) {
					try {
						var result = allInputs[k].beforeSubmitForm(form);
						if (typeof(result) != 'undefined' && !result)
							return false;
					} catch(e) {
						console.error('error in beforeSubmitForm '+k, e);
						return false;
					}
				}
			}
		}
		return true;
	}

	UI.sendForm = function(form, field_params, conn_params, target, from_popup) {
		var result, restore, restore_params, vresult;

		form = UI.getForm(form);
		if(! form)
			return null;
		if(! conn_params) conn_params = {};
		if (YLang.isObject(field_params)) {
			if (!field_params.format)
				field_params.format = 'html';
		}
		if(target) {
			restore_params = UI.updateForm(form, field_params);
			restore = {action: form.getAttribute('action'), target: form.getAttribute('target')};
			if(conn_params.url)
				form.action = conn_params.url;
			else if(form.getAttribute('method') == 'POST')
				form.action = 'index.php';
			if(target === true) target = '_self';
			form.target = target;
		}
		if(! conn_params.no_validate && ! (vresult = UI.validateForm(form)).status) {
			UI.alertInvalidForm(vresult);
			return false;
		}
		result = UI.beforeSubmitForm(form);
		if (isdef(result) && !result)
			return false;
		if(target) {
			form.submit();
			setAttrs(form, restore);
			UI.updateForm(form, restore_params);
			return false;
		} else {
			SUGAR.session.setLoadingState(null, null, true);
		}

		if(! conn_params.status_msg) {
			var perform;
			if(field_params && field_params.record_perform)
				perform = field_params.record_perform;
			else if(form.elements.record_perform)
				perform = form.elements.record_perform.value;
			else if(form.elements.list_layout_perform)
				perform = form.elements.list_layout_perform.value;
			if(perform == 'save') {
				conn_params.status_msg = app_string('LBL_SAVING');
			}
			else if(perform == 'validate') {
				conn_params.status_msg = app_string('LBL_VALIDATING');
			}
		}

        if (from_popup) {
        	if(! conn_params.popupDialog)
				conn_params.popupDialog = window.popup_dialog || SUGAR.popups.getCurrent();
			if(field_params && field_params.reload_after)
				conn_params.reloadAfter = 1;
			if(field_params && field_params.close_popup)
				conn_params.closePopup = 1;
        }

		if(! isset(conn_params.resultDiv)) {
			if (conn_params.popupDialog)
				conn_params.resultDiv = conn_params.popupDialog.getContentElement();
			else
				conn_params.resultDiv = 'content-main';
		}
		if(conn_params.resultDiv && ! conn_params.disableMask)
			conn_params.maskId = SUGAR.util.maskDiv(conn_params.resultDiv);
		SUGAR.conn.sendForm(form, conn_params, UI.receiveForm, UI.failForm, field_params);

		return false;
	}

	UI.failForm = function(result, conn) {
		if(this.maskId) {
			SUGAR.util.hideMask(this.maskId);
		}
		if (conn && conn.failure_msg)
			SUGAR.ui.Status.show(conn.failure_msg, 4000); 
	}

	UI.receiveForm = function(result) {
		if(result) {
			var div, body = this.responseText, cb_ret, doScroll;
			if(this.resultDiv) div = $(this.resultDiv);
			if(div && body.indexOf('<script nodisplay>') < 0) {
				div.innerHTML = SUGAR.util.disableInlineScripts(body);
				doScroll = ! this.noScrollTo
			}
			SUGAR.util.evalScript(body);
			if(this.receiveCallback)
				cb_ret = this.receiveCallback();
			if (this.popupDialog && (this.closePopup || this.reloadAfter) && ! cb_ret) {
				this.popupDialog.close();
				doScroll = false;
			}
			if (this.reloadAfter && ! cb_ret) {
				setTimeout ("document.location.reload(true)", 200);
				doScroll = false;
            }
			if(doScroll)
				SUGAR.util.scrollToElement(div);
		}
		else {
			// FIXME show connection error
			console.log('retrieve failed');
			if(this.maskId) {
				SUGAR.util.hideMask(this.maskId);
			}
		}
	}


	UI.callEvent = function(elt, handler) {
		if(arguments.length > 2) {
			var args = [];
			for(var i = 2; i < arguments.length; i++)
				args.push(arguments[i]);
			UI.applyEvent(elt, handler, args);
		} else
			UI.applyEvent(elt, handler);
	}

	UI.applyEvent = function(elt, handler, args) {
		if(! handler) return;
		if(! args) args = []; // IE8 requires this
		if(YLang.isString(handler)) {
			var f = resolveVar(handler);
			if(! f)
				f = new Function(handler);
			return f.apply(elt, args);
		} else if(YLang.isArray(handler)) {
			var ret;
			for(var i = 0; i < handler.length; i++)
				ret = UI.applyEvent(elt, handler[i], args);
			return ret;
		} else if(handler.apply)
			return handler.apply(elt, args);
	}

	UI.attachFormInputEvent = function(form, id, evt_name, handler) {
		var ctl = UI.getFormInput(form, id);
		if(ctl) return UI.attachInputEvent(ctl, evt_name, handler);
	}

	UI.attachInputEvent = function(input, evt_name, handler) {
		if(typeof(input) != 'object' || ! input || ! handler) return false;
		if(YLang.isArray(handler)) {
			var ret = true, i;
			for(i = 0; i < handler.length; i++)
				ret |= UI.attachInputEvent(input, evt_name, handler[i]);
			return ret;
		}
		else if(input[evt_name] && input[evt_name].push)
			input[evt_name].push(handler);
		else if(input[evt_name])
			input[evt_name] = [input[evt_name], handler];
		else
			input[evt_name] = [handler];
		return true;
	}

	UI.changeLayout = function(form, layout) {
		return UI.sendForm(form, {layout: layout, format: 'html'});
	}
	
	UI.copyAddress = function(form, from_addr, to_addr) {
		var inp = UI.getFormInput(form, to_addr);
		if(inp) inp.copyFrom(from_addr);
	}

    UI.openQuickCreate = function(module, params) {
        var query = 'mgr_type=quick_create&record_perform=edit&';
        query = encodeQueryString(params, query);
        if (module == 'Booking' && isset(params.return_module))
            query += '&related_type=' + params.return_module;
        return UI.openEditPopup(module, query);
   	}

    UI.openCallLogging = function(params) {
        var query = 'mgr_type=call_logging&record_perform=edit&';
        query = encodeQueryString(params, query);
        return UI.openEditPopup('Calls', query);
   	}

    UI.openEditPopup = function(module, query) {
        var options = { module: '', action: 'EditView', inline: true, query_string: '', width: 750, min_height: 100};
        options.module = module;
        options.query_string = query;
        return open_popup_window(options);
    }

    UI.saveQuickCreate = function(form, view_after, params) {
        function ready() {
        	if(SUGAR.session.quick_create_result) {
				SUGAR.popups.close();
				if (! view_after)
					UI.refreshTarget(params.target_name, params.target_id);
			}
            return true;
        }

        try {
            return UI.sendForm(form, {record_perform: "save", go_to_view: view_after}, {receiveCallback: ready}, false, true);
        } catch(e) {
            console.error(e); return false;
        }
    }

    UI.refreshTarget = function(target_name, target_id) {
        if (target_name == 'subpanel') {
            var frm = target_id + '-ListUpdate';
            var conn_params = {};
            conn_params.resultDiv = '' + target_id + '-outer';
            return UI.sendForm(frm, {"record_perform": "subpanel_render"}, conn_params);
        } else {
            return false;
        }
    }

    UI.loadFullForm = function(form, params) {
        var field_params = {record_perform: 'edit', 'mgr_type': '', action: 'EditView', in_popup: 0};
        field_params[params.primary_name] = params.primary_value;

        if (params.hasOwnProperty('module'))
            field_params.module = params.module;

        if (params.target_layout != '')
            field_params.layout = params.target_layout;
		else if (!params.target_layout) 
            field_params.layout = '';

        function ready() {SUGAR.popups.close();}

        try {
            return UI.sendForm(form, field_params, {no_validate: true, receiveCallback: ready});
        } catch(e) {
            console.error(e); return false;
        }
    }

    UI.makeCall = function(form, type) {
        var number = '';
        var number_inp = UI.getFormInput(form, 'phone_number');
        if (number_inp) {
            number = number_inp.getValue();
        } else if (document.DetailForm.phone_number) {
            number = document.DetailForm.phone_number.value;
        }

<<<<<<< HEAD
        if ( (number.substr(0, 1) == '+' || number.substr(0, 2) == '00' || number.substr(0, 1) == '0') && type != '') {
=======
        if (number.match(/^[+0]/) && type != '') {
>>>>>>> origin/master
            var status_sel = UI.getFormInput(form, 'status');
            if (status_sel)
                status_sel.setValue('Held');

            if (type == 'skypeout') {
                return SUGAR.util.loadUrl('callto:' + number);
<<<<<<< HEAD
            } else if ( type == 'cti'){
=======
			} else if ( type == 'cti'){
>>>>>>> origin/master
				SUGAR.conn.asyncRequest('cti/placeCall.php?phoneNr=' + encodeURIComponent(number));
				return true;
			} else {
                return false;
            }
        } else {
            alert(app_string('ERR_WRONG_PHONE_NUMBER'));
        }

    }

    UI.quickEdit = function(params) {
        var id = params.field +'-'+ params.row_id;
        var edit_elt = new UI.QuickElt(id, params);
        edit_elt.setup();
        edit_elt.show();
    }

    UI.setupCalendarLinksMenu = function(form_id, target_id, target_date, view_mode, label, options) {
        createElement2('div', {className: 'input-arrow select-label'}, (createElement2('span', {className: 'input-label', id: target_id + '-label'}, label)), $(target_id));

        SUGAR.ui.registerMenuSource(target_id, {icon_key: 'icon'}, form_id);
        var menu_button = SUGAR.ui.getMenuSource(form_id, target_id);
        var url = 'index.php?module=Calendar&target_date=' +target_date+ '&view_mode=' +view_mode+ '&view_type=';

   		SUGAR.ui.attachInputEvent(menu_button, 'onchange', function(k) { return SUGAR.util.loadUrl(url + k) });
        menu_button.menu.setOptions(new SUGAR.ui.SelectOptions(options));
    }

    UI.setupEmailParentsMenu = function(form_id, target_id, options, record_id) {
        SUGAR.ui.registerMenuSource(target_id, {icon_key: 'icon'}, form_id);
        var menu_button = SUGAR.ui.getMenuSource(form_id, target_id);

        SUGAR.ui.attachInputEvent(menu_button, 'onchange',
            function(k) {
                var url = 'index.php?module='+k+'&action=EditView&return_module=Emails&return_action=index&return_record='+record_id+'&return_layout=Standard&return_panel='+k.toLowerCase();
                return SUGAR.util.loadUrl(url)
        });
        menu_button.menu.setOptions(new SUGAR.ui.SelectOptions(options));
    }
})();


// utility methods
SUGAR.popups = {
	known: {},
	reposition: function() {
		SUGAR.ui.PopupManager.reposition();
	},
	close: function(popup) {
		return SUGAR.ui.PopupManager.close(popup);
	},
    getCurrent: function() {
   		return SUGAR.ui.PopupManager.last_opened;
   	},
	openUrl: function(url, conn_params, dlg_params) {
		var d = new SUGAR.ui.Dialog(null, dlg_params);
		d.render();
		d.fetchContent(url, conn_params, null, true);
		popup_dialog = d;
		return d;
	},
	getKnown: function(popup) {
		var p = this.known[popup];
		if(! p)
			return;
		if(! p.elt || ! YDom.inDocument(p.elt)) {
			this.known[popup] = null;
			return;
		}
		return p;
	},
	showPopup: function(tg, popup, offset, delay, hooks) {
		if(! (popup instanceof SUGAR.ui.Popup)) {
			popup = $(popup);
			if(! popup) return;
			var p;
			if(popup.id && (p = this.getKnown(popup.id))) {
				popup = p;
				popup.target = tg;
				popup.target_offset = offset;
				if(hooks && hooks.show)
					popup.onshow = hooks.show;
			}
			else {
				popup = new SUGAR.ui.Popup(popup, {target: tg, target_offset: offset, destroy_on_close: false});
				if(hooks && hooks.show)
					popup.onshow = hooks.show;
				this.known[popup.id] = popup;
				if(! popup.elt.id)
					popup.elt.id = popup.id;
			}
		}
		else {
			if(tg)
				popup.target = tg;
			if(offset)
				popup.target_offset = offset;
			if(hooks && hooks.show)
				popup.onshow = hooks.show;
		}
		popup.show(delay);
	},
	hidePopup: function(popup) {
		SUGAR.popups.close(popup);
	},
	attachPopup: function(tg, popup, params) {
		if(! params) params = {};
		var show = function() {
			if(! params.require_click) {
				var p = SUGAR.ui.PopupManager.last_opened;
				if(p && ! p.modal && ! p.close_on_exit)
					return; // don't trigger popup when a semi-persistent one is open, or it will be dismissed
			}
			SUGAR.popups.showPopup(tg, popup, params.offset, params.delay, params.hooks);
			return false;
		}
		tg = $(tg);
		if(! tg)
			return false;
		if(isIPhone)
			params.require_click = true;
		if(params.require_click) {
			params.delay = 0;
			$(tg).onclick = show;
		} else
			$(tg).onmouseover = show;
		return true;
	},
	hiliteItem: function(menuItem,changeClass){
		if(changeClass)
			YDom.addClass(menuItem, 'hilite');
	},
	unhiliteItem: function(menuItem) {
		YDom.removeClass(menuItem, 'hilite');
	},
	quickShow: function(content, title, target, params) {
		if(! params) params = {};
		if(! title) {
			params.have_title_bar = false;
			params.draggable = false;
		} else
			params.title = title;
		if(target)
			params.target = target;
		var d = new SUGAR.ui.MiniDialog(null, params);
		if(isNode(content))
			d.content_elt = content;
		else if(isset(content))
			d.setContent(content);
		d.render() && d.show();
		return d;
	},
	tooltip: function(param, target) {
		var params;
		if(typeof(param) == 'object')
			params = deep_clone(param);
		else
			params = {content: param};
		if(! isset(params.destroy_on_close))
			params.destroy_on_close = true;
		if(target)
			params.target = target;
		params.pre_triggered = true;
		var t = new SUGAR.ui.Tooltip(null, params);
	},
	initContent: function(params) {
		SUGAR.ui.PopupManager.initContent(params);
	},
	setTitle: function(title) {
		var c = SUGAR.popups.getCurrent();
		if(c && c.setTitle) c.setTitle(title);
	},
	setTitleHtml: function(title) {
		var c = SUGAR.popups.getCurrent();
		if(c && c.setTitleHtml) c.setTitleHtml(title);
	}
};
// used by popup_helper.js
get_close_popup = function() { return SUGAR.popups.close; }

ui_popup_return = function(result) {
	if(! result) return;
	var input = SUGAR.ui.getFormInput(result.form_name, result.passthru_data.ui_input_name),
		row, count;
	if(input) {
		if(result.name_to_value_array) {
			row = {ID_0: result.name_to_value_array};
			count = 1;
		} else if(result.selection_list) {
			row = result.selection_list;
			count = result.selection_count;
		}
		else return;
        input.update_from_popup = true;
		if(result.passthru_data.ui_return_method) {
			input[result.passthru_data.ui_return_method](row, count);
        } else {
			var pK = result.primary_key || 'id';
			input.userUpdate(row.ID_0[pK], row.ID_0);
		}
        input.update_from_popup = false;
	}
}


remove_link = function(list_id, link_id) {
    var msg =SUGAR.language.get('app_strings', 'NTC_REMOVE_CONFIRMATION');
    if (confirm(msg)) {
        form_params = {};
        form_params.link_id = link_id;
        form_params.record_perform = 'subpanel_remove';
        var conn_params = {};
        conn_params.resultDiv = '' + list_id + '-outer';
        var frm = list_id + '-ListUpdate';
        SUGAR.ui.sendForm(frm, form_params, conn_params);
    }
}

// for compatibility only
ajaxStatus = {
	shown: [],
	// prefer SUGAR.ui.showStatus
	showStatus: function(text) {
		var last = SUGAR.ui.Status.show(text);
		this.shown.push(last);
		return last;
	},
	// prefer statusMessage.hide();
	hideStatus: function(id) {
		if(id) {
			SUGAR.ui.Status.remove(id);
			while(this.shown.length && this.shown.pop().id != id);
		} else if(this.shown.length)
			SUGAR.ui.Status.remove(this.shown.pop());
	},
	positionStatus: function() {
		SUGAR.ui.StatusHandler.reposition();
	}
};

// from overlib
function nd() {}
function cClick() {}
// quicksearch
sqs_objects = {};

/*if(isIPhone) {
	function positionFooter() {
		var f = $('footerDiv'),
			viewp = SUGAR.ui.getViewport();
		if(f && viewp) {
			f.style.position = 'absolute';
			f.style.top = 0;
			f.style.left = 0;
			var pos = {x: viewp.x, y: viewp.y + viewp.height - 4};
			var zoom = Math.min(viewp.width / viewp.view_width, 1.0);
			f.style.width = (viewp.width / zoom) + 'px';
			f.style.webkitTransformOrigin = 'bottom left';
			f.style.webkitTransform = 'translate3d(' + pos.x + 'px, ' + pos.y + 'px, 0) scale('+ zoom +')';
			f.style.display = 'block';
		}
	}
	function positionMenu() {
		var matrix = new WebKitCSSMatrix($('footerDiv'));
		var realpos = matrix.transform(x, y);
	}
	YEvent.addListener(window, 'scroll', positionFooter);
	YEvent.addListener(window, 'resize', positionFooter);
	YEvent.onAvailable('footerDiv', positionFooter);
	setTimeout(positionFooter, 1000); // just in case :/
}*/
